import TelegramBot from "node-telegram-bot-api";
import cron from "node-cron";
import fs from "fs";

import {
	sendDataAboutText,
	sendDataAboutButton,
	sendDataAboutError,
} from "./tgterminal.js";

import { config } from "./config.js";

import {
	foodmenu27c1,
	foodmenu27c2,
	class10a,
	class10b,
	class10g,
	class11a,
	class11v,
	class11g,
	class11d,
} from "./sheets.js";

const TOKEN = config.TOKENs[0]; // 1 - –æ—Ä–∏–≥–∏–Ω–∞–ª
const bot = new TelegramBot(TOKEN, { polling: true });

const qu1z3xId = "923690530";
const stepanovId = "5786876945";
const jackId = "6815420098";
let BotName = "digschbot";

//? –ú–ê–°–°–ò–í–´ –î–ê–ù–ù–´–•

let usersData = []; // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
let remindersData = []; // —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
let diningRoomData = []; // –æ—Ç–∑—ã–≤—ã –æ –µ–¥–µ –≤ —Å—Ç–æ–ª–æ–≤–æ–π

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã

const stickers = [
	"CAACAgIAAxkBAAIXI2U1QcFdX12aOkHp0zodw3LWDX5KAAKFAAPBnGAMi4wdH0hTXSIwBA",
	"CAACAgIAAxkBAAIXJGU1QclHfnHsU6z0isqU3v72p11mAAJ0AAPBnGAMtJfqrsmMmrQwBA",
	"CAACAgIAAxkBAAIXJWU1QdMJWNfIOh9odZH8Q25K98A-AAJvAAPBnGAMyw59i8DdTVYwBA",
	"CAACAgIAAxkBAAIXJmU1QdsTofm7uh7hi3mNYNE837HpAAJ6AAPBnGAM0GBdiVRCvP4wBA",
];

bot.setMyCommands([
	{
		command: "/restart",
		description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üëæ",
	},
]);

// –ß—Ç–æ –Ω–æ–≤–æ–≥–æ? text

const newsText = [
	"",
	"–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.. ü§î",
	`- –£–†–ê! –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! ü§ó\n\n- –û–±–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ‚úÖ\n\n- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä üëå\n\n- –û–±—ä–µ–º –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞, —É–ø–∏—Ä–∞–µ—Ç—Å—è –≤ +6000 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ <a href= "https://t.me/${BotName}/?start=minidetail5">ü´°</a>\n\n- –Ø —Å—Ç–∞–ª –±—ã—Å—Ç—Ä–µ–µ, –≤–æ –≤—Å–µ—Ö —Å–º—ã—Å–ª–∞—Ö üèéÔ∏è\n\n- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–æ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –°–ï–ö–£–ù–î–£ ü§Ø`,
	'–ú–ë–û–£ –°–û–® ‚Ññ27 | –®–∫–æ–ª–∞ —Å 2023 –≥–æ–¥–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –Ω–∞ –¥–≤–∞ –∫–æ—Ä–ø—É—Å–∞, –Ω–æ –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–º, —Ç–∞–∫ –∏ –≤–æ –≤—Ç–æ—Ä–æ–º —Ü–∞—Ä–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —É—á–µ–Ω–∏—á–µ—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞! –ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ. –£—á–µ–Ω–∏–∫–∏ –∏ —É—á–∏—Ç–µ–ª—è –æ–±—Ä–∞–∑—É—é—Ç –µ–¥–∏–Ω—É—é –±–æ–ª—å—à—É—é —Å–µ–º—å—é, –≥–¥–µ –¥—Ä—É–∂–±–∞ –∏ –∑–Ω–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º. –¢–∞–∫–∂–µ —É –Ω–∞—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –≤ –æ–±–æ–∏—Ö –∫–æ—Ä–ø—É—Å–∞—Ö!\n\n–°–æ–≤—Å–µ–º –Ω–µ–¥–∞–≤–Ω–æ –Ω–∞—à–∞ —à–∫–æ–ª–∞ –∑–∞–Ω—è–ª–∞ 3-–µ –º–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ "–ö—É–±–æ–∫ –ø–∞–º—è—Ç–∏ –ê. –ó. –ë–∞–∫—É—Ä–æ–≤–∞", —Å—ã–≥—Ä–∞–≤ —Å–æ –≤—Å–µ–º–∏ —à–∫–æ–ª–∞–º–∏ –≤ –æ–∫—Ä—É–≥–µ!',
];

// –ö–ª–∞—Å—Å—ã

const weekDayNames = [
	"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
	"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
	"–í—Ç–æ—Ä–Ω–∏–∫",
	"–°—Ä–µ–¥–∞",
	"–ß–µ—Ç–≤–µ—Ä–≥",
	"–ü—è—Ç–Ω–∏—Ü–∞",
	"–°—É–±–±–æ—Ç–∞",
];
const weekDayNamesSHORT = ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"];

const monthNames = [
	"–Ø–Ω–≤–∞—Ä—è",
	"–§–µ–≤—Ä–∞–ª—è",
	"–ú–∞—Ä—Ç–∞",
	"–ê–ø—Ä–µ–ª—è",
	"–ú–∞—è",
	"–ò—é–Ω—è",
	"–ò—é–ª—è",
	"–ê–≤–≥—É—Å—Ç–∞",
	"–°–µ–Ω—Ç—è–±—Ä—è",
	"–û–∫—Ç—è–±—Ä—è",
	"–ù–æ—è–±—Ä—è",
	"–î–µ–∫–∞–±—Ä—è",
];

const monthNamesSHORT = [
	"—è–Ω–≤",
	"—Ñ–µ–≤",
	"–º–∞—Ä",
	"–∞–ø—Ä",
	"–º–∞—è",
	"–∏—é–Ω",
	"–∏—é–ª",
	"–∞–≤–≥",
	"—Å–µ–Ω",
	"–æ–∫—Ç",
	"–Ω–æ—è",
	"–¥–µ–∫",
];

const timesOnLesson = [
	"08:15", // 1-–π —É—Ä–æ–∫
	"09:10", // 2-–π —É—Ä–æ–∫
	"10:05", // 3-–π —É—Ä–æ–∫
	"10:50", // 4-–π —É—Ä–æ–∫
	"11:45", // 5-–π —É—Ä–æ–∫
	"12:45", // 6-–π —É—Ä–æ–∫
	"13:30", // 7-–π —É—Ä–æ–∫
];

const timesOnBreak = [
	"08:55", // –ü–µ—Ä–µ–º–µ–Ω–∞ –ø–æ—Å–ª–µ 1-–≥–æ —É—Ä–æ–∫–∞
	"09:50", // –ü–µ—Ä–µ–º–µ–Ω–∞ –ø–æ—Å–ª–µ 2-–≥–æ —É—Ä–æ–∫–∞
	"10:45", // –ü–µ—Ä–µ–º–µ–Ω–∞ –ø–æ—Å–ª–µ 3-–≥–æ —É—Ä–æ–∫–∞
	"11:30", // –ü–µ—Ä–µ–º–µ–Ω–∞ –ø–æ—Å–ª–µ 4-–≥–æ —É—Ä–æ–∫–∞
	"12:25", // –ü–µ—Ä–µ–º–µ–Ω–∞ –ø–æ—Å–ª–µ 5-–≥–æ —É—Ä–æ–∫–∞
	"13:25", // –ü–µ—Ä–µ–º–µ–Ω–∞ –ø–æ—Å–ª–µ 6-–≥–æ —É—Ä–æ–∫–∞
	"14:10", // –ü–µ—Ä–µ–º–µ–Ω–∞ –ø–æ—Å–ª–µ 7-–≥–æ —É—Ä–æ–∫–∞
];

let textToSayHello = "",
	// Raspisanie
	month,
	day,
	dayW,
	maxCountMiniDetails = 10,
	// games
	rndNum,
	// adminMenu
	chatIdForBlacklist = "",
	buttonUpdateActive = true,
	numberArr = 0,
	paragrafs = [
		"‚ùó–í–ù–ò–ú–ê–ù–ò–ï‚ùó",
		"‚úâÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üó®Ô∏è",
		"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ üì¢",
		"üÜï –ù–æ–≤–æ—Å—Ç–∏ üåç",
	],
	textMessageForAllUsers;

const newFunctionsNotification = [
	"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ –∑–∞ 5 –º–∏–Ω—É—Ç? üßê\n–í —Ä–∞–∑–¥–µ–ª–µ –ó–≤–æ–Ω–∫–∏ - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! ü§ó\n\n",
	"–ì–æ–≤–æ—Ä—è—Ç, –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å! üßê\n\n",
	"–ü–ª–æ—Ö–∞—è –ø–∞–º—è—Ç—å? –î–∞–≤–∞–π —è –Ω–∞–ø–æ–º–Ω—é! üòÖ\n\n",
	"–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –∞–∫—Ç—É–∞–ª—å–Ω–æ! ‚úåÔ∏è\n\n",
	"–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ —É —Ç–µ–±—è –≤ –∏–≥—Ä–∞—Ö? üßê\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö! üòâ\n\n",
	"–ê –ø—Ä–∞–≤–¥–∞, —á—Ç–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫? ü§î\n\n",
	"–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π–¥–∏ —Ö–æ—Ç—å –æ–¥–Ω—É —Å–º–∞–π–ª–∏–∫-–ø–∞—Å—Ö–∞–ª–∫—É üòâ\n\n",
	"–ê —á—Ç–æ –∂–µ —è —É–º–µ—é? ‚¨ÜÔ∏è\n\n",
	"–ß—Ç–æ –∂–µ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫? ü§î\n–†–∞–∑–¥–µ–ª –°—Ç–æ–ª–æ–≤–∞—è! üòâ\n\n",
	"–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞ –æ–±–µ–¥! üòã\n–†–∞–∑–¥–µ–ª –°—Ç–æ–ª–æ–≤–∞—è! üòâ\n\n",
	"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —É —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞ –Ω–µ–¥–µ–ª–µ??\n–í —Ä–∞–∑–¥–µ–ª–µ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ü—Ä–µ–¥–º–µ—Ç—ã! ü§ó\n\n",
	"–Ø –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å, –∏ –Ω–æ–≤–æ–µ –æ —Å–µ–±–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –≤ —Ä–∞–∑–¥–µ–ª–µ:\n–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ - –û –±–æ—Ç–µ! ü§ó\n\n",
	"",
	"",
	"",
	"",
	"",
	"–ù–∏–∂–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Ä–∞–∑–Ω–æ–µ‚ùì\n\n",
];

const menuHomeText = [
	`–ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è? <a href="https://t.me/${BotName}/?start=minidetail0">üòâ</a>`,
	`–ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω? <a href="https://t.me/${BotName}/?start=minidetail0">ü§ì</a>`,
	`–ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º? <a href="https://t.me/${BotName}/?start=minidetail0">ü•∏</a>`,
	`–ß–µ–º —è –º–æ–≥—É —Ç–µ–±—è –æ–±–ª–µ–≥—á–∏—Ç—å? <a href="https://t.me/${BotName}/?start=minidetail0">üêµ</a>`,
	`–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? <a href="https://t.me/${BotName}/?start=minidetail0">ü§ñ</a>`,
	`–° —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å? <a href="https://t.me/${BotName}/?start=minidetail0">ü§î</a>`,
	`–í —á–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω? <a href="https://t.me/${BotName}/?start=minidetail0">üëæ</a>`,
	`–ö–∞–∫ —è –º–æ–≥—É —Ç–µ–±—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å? <a href="https://t.me/${BotName}/?start=minidetail0">üê§</a>`,
];

//?  –§–£–ù–ö–¶–ò–ò

async function menuHome(chatId, exit = true) {
	rndNum = Math.floor(Math.random() * menuHomeText.length);
	let rnd2 = Math.floor(Math.random() * newFunctionsNotification.length);

	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		if (exit) {
			await bot.editMessageText(
				`<i>${newFunctionsNotification[rnd2]}</i><b>${menuHomeText[rndNum]}</b>`,
				{
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					parse_mode: "HTML",
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìö",
									callback_data: "today",
								},
							],
							[
								{
									text: "–ó–≤–æ–Ω–∫–∏ ‚è∞",
									callback_data: "calls",
								},
								{ text: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üóìÔ∏è", callback_data: "reminders" },
							],
							[
								{
									text: "–°—Ç–æ–ª–æ–≤–∞—è üçú",
									callback_data: "foodmenutoday",
								},
								{ text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ‚ùó", callback_data: "news" },
							],
							[
								{ text: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üïπÔ∏è", callback_data: "games" },
								{ text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data: "settings" },
							],
							[
								{
									text: `${
										chatId == qu1z3xId ? "üí† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üí†" : ""
									}`,
									callback_data: "adminMenu",
								},
							],
						],
					},
				}
			);
		} else if (!exit) {
			bot.sendMessage(
				chatId,
				`<i>${newFunctionsNotification[rnd2]}</i><b>${menuHomeText[rndNum]}</b>`,
				{
					parse_mode: "html",
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìö",
									callback_data: "today",
								},
							],
							[
								{
									text: "–ó–≤–æ–Ω–∫–∏ ‚è∞",
									callback_data: "calls",
								},
								{ text: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üóìÔ∏è", callback_data: "reminders" },
							],
							[
								{
									text: "–°—Ç–æ–ª–æ–≤–∞—è üçú",
									callback_data: "foodmenutoday",
								},
								{ text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ‚ùó", callback_data: "news" },
							],
							[
								{ text: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üïπÔ∏è", callback_data: "games" },
								{ text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data: "settings" },
							],
							[
								{
									text: `${
										chatId == qu1z3xId ? "üí† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üí†" : ""
									}`,
									callback_data: "adminMenu",
								},
							],
						],
					},
				}
			).then((message) => {
				dataAboutUser.messageId = message.message_id;
			});
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function rulesBot(chatId, RulesToStart = true) {
	let rulesText = `<i>ü§ñ –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üìÉ</i>\n\n‚ùó–≠–¢–û –û–ß–ï–ù–¨ –í–ê–ñ–ù–û <a href = "https://t.me/${BotName}/?start=minidetail6">‚ùó</a>\n\n-  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å <a href = "https://t.me/${BotName}/?start=showhi2">–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç?</a>\n\n-  –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —Å—Ç—Ä–æ–≥–æ –≤ –±–ª–∞–≥–∏—Ö —Ü–µ–ª—è—Öüåç\n\n-  –ù–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª, –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ–µ–≤‚ùå\n\n-  –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç - –∫–æ–º–∞–Ω–¥–∞ /restart –≤ —Ç–≤–æ–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏!üòâ\n\n-  –ù–∞—à–ª–∞—Å—å –æ—à–∏–±–∫–∞? –ë–æ—Ç –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç? –ï—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞? - –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –∞–≤—Ç–æ—Ä—É @digfusionsupport üëç\n\n-  –¢–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞—è –ø—Ä–∞–≤–∏–ª–∞, —Ç—ã —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö —à–∫–æ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ (—Ç.–µ. –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –º–Ω–æ–π) üòâüîí`;

	if (RulesToStart) {
		try {
			await bot.editMessageText(`<b>${rulesText}</b>`, {
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				parse_mode: "html",
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–Ø –ø—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞ ‚úÖ",
								callback_data: "chooseclass1",
							},
						],
					],
				},
			});
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
			bot.sendMessage(
				chatId,
				`<b>–°–≤–µ—Ä—Ö—É –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ üôà\n\n${rulesText}</b>`,
				{
					parse_mode: "html",
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "chooseclass1" },
								{ text: "–ü—Ä–∏–Ω—è—Ç—å‚úÖ", callback_data: "agreerules" },
							],
						],
					},
				}
			);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	} else if (!RulesToStart) {
		try {
			await bot.editMessageText(`<b>${rulesText}</b>`, {
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				parse_mode: "html",
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "settings" },
							{
								text: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠",
								url: "https://t.me/digfusionsupport",
							},
							,
						],
					],
				},
			});
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		}
	}
}

async function ChoosingClass(chatId, start = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
	try {
		if (start == 0) {
			await bot.editMessageText(
				`<i><b>‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞/—à–∫–æ–ª—ã üîÑÔ∏è\n\n</b>–ö–ª–∞—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!üîí</i><b>${
					dataAboutUser.className != "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
						? `</b>\n\n–¢–µ–∫—É—â–∏–π: <b>${dataAboutUser.className} ‚Ä¢ ${
								dataAboutUser.schoolName == "27c2"
									? "‚Ññ27–∫2"
									: `${
											dataAboutUser.schoolName == "27c1"
												? "‚Ññ27–∫1"
												: `${
														dataAboutUser.schoolName == ""
															? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
															: ""
												  }`
									  }`
						  }`
						: ``
				}\n\n</b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ <b>—Å–≤–æ–π</b> –∫–ª–∞—Å—Å üôÇüîé`,
				{
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					parse_mode: "html",
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: `${
										dataAboutUser.className == "10–ê" ? "‚Ä¢10–ê‚Ä¢" : "10–ê"
									}`,
									callback_data: "10a",
								},
								{
									text: `${
										dataAboutUser.className == "10–ë" ? "‚Ä¢10–ë‚Ä¢" : "10–ë"
									}`,
									callback_data: "10b",
								},
								{
									text: `${
										dataAboutUser.className == "10–ì" ? "‚Ä¢10–ì‚Ä¢" : "10–ì"
									}`,
									callback_data: "10g",
								},
							],
							[
								{
									text: `${
										dataAboutUser.className == "11–ê" ? "‚Ä¢11A‚Ä¢" : "11A"
									}`,
									callback_data: "11a",
								},
								{
									text: `${
										dataAboutUser.className == "11–í" ? "‚Ä¢11–í‚Ä¢" : "11–í"
									}`,
									callback_data: "11v",
								},
								{
									text: `${
										dataAboutUser.className == "11–ì" ? "‚Ä¢11–ì‚Ä¢" : "11–ì"
									}`,
									callback_data: "11g",
								},
								{
									text: `${
										dataAboutUser.className == "11–î" ? "‚Ä¢11–î‚Ä¢" : "11–î"
									}`,
									callback_data: "11d",
								},
							],
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "settings" },
								{ text: "–ù–µ—Ç –º–æ–µ–≥–æüòû", callback_data: "netclassa" },
							],
						],
					},
				}
			);
		} else if (start == 1) {
			bot.editMessageText(
				`<b><a href ="https://t.me/${BotName}/?start=rules">–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º</a>\n\n</b><i>–ö–ª–∞—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</i><b> üîí\n\n–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å üôÇüîé</b>`,
				{
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					parse_mode: "html",
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[{ text: "–í–æ–π—Ç–∏ –∫–∞–∫ –≥–æ—Å—Ç—å ü§†", callback_data: "10g" }],
							[
								{ text: "10–ê", callback_data: "10a" },
								{ text: "10–ë", callback_data: "10b" },
								{ text: "10–ì", callback_data: "10g" },
							],
							[
								{ text: "11A", callback_data: "11a" },
								{ text: "11–í", callback_data: "11v" },
								{ text: "11–ì", callback_data: "11g" },
								{ text: "11–î", callback_data: "11d" },
							],
							[{ text: "–ù–µ—Ç –º–æ–µ–≥–æüòû", callback_data: "netclassa1" }],
						],
					},
				}
			);
		} else if (start == 2) {
			bot.editMessageText(
				`*–ë—É–¥–µ–º –±–ª–∏–∂–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è\\! üòä\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, _–æ–∑–Ω–∞–∫–æ–º—å—Å—è –∏ –°–û–ì–õ–ê–°–ò–°–¨_ —Å [–ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º](https://t.me/${BotName}/?start=rules)‚ùóüôÇ* `,
				{
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					parse_mode: "MarkdownV2",
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üìÉ",
									callback_data: `rules1`,
								},
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function Raspisanie(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.weekday = dayW;
		await bot.editMessageText(
			`<b><i>‚è∞ –î–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üìö</i></b>\n\n–°–µ–≥–æ–¥–Ω—è: <b>${
				weekDayNames[dayW]
			}, ${day} ${monthNames[month]}</b>\n–ö–ª–∞—Å—Å: <b>${
				usersData.find((obj) => obj.chatId == chatId).className
			}</b> - <a href ="https://t.me/${BotName}/?start=editclass">–∏–∑–º–µ–Ω–∏—Ç—å</a>\n\n<b>–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚ùìü§î</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–ù–∞ —Å–µ–≥–æ–¥–Ω—è üïö",
								callback_data: "today",
							},
							{
								text: "–ù–∞ –∑–∞–≤—Ç—Ä–∞ üï∞Ô∏è",
								callback_data: "nextweekday",
							},
						],
						[
							{ text: "–ü–Ω üê•", callback_data: "mon" },
							{ text: "–í—Ç üôà", callback_data: "tue" },
							{ text: "–°—Ä üéØ", callback_data: "wen" },
						],
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "today" },
							{ text: "–ß—Ç ‚òÄÔ∏è", callback_data: "thu" },
							{ text: "–ü—Ç ü•á", callback_data: "fri" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function RaspisanieText(
	chatId,
	dayForRaspisanie = usersData.find((obj) => obj.chatId == chatId).weekday
) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	dataAboutUser.userAction = "RaspisanieText";

	try {
		dataAboutUser.weekday = dayForRaspisanie;

		if (dataAboutUser.className == "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω") {
			await bot.editMessageText(
				`<b><i>üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìö\n\n–ù–µ –Ω–∞—Ö–æ–∂—É —Ç–≤–æ–π –∫–ª–∞—Å—Å‚ùó</i></b>\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ <b>–≤—ã–±–µ—Ä–∏</b> –µ–≥–æ! üòâ`,
				{
					parse_mode: "html",
					chat_id: chatId,
					disable_web_page_preview: true,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "exit" },
								{ text: "–í—ã–±—Ä–∞—Ç—å ‚öôÔ∏è", callback_data: "chooseclass0" },
							],
						],
					},
				}
			);
		} else {
			let raspisanieText = "";
			const dateNowHHMM =
				new Date().getHours() * 100 + new Date().getMinutes();
			const classArr =
				dataAboutUser.className == "10–ì"
					? class10g
					: dataAboutUser.className == "10–ë"
					? class10b
					: dataAboutUser.className == "10–ê"
					? class10a
					: dataAboutUser.className == "11–î"
					? class11d
					: dataAboutUser.className == "11–ì"
					? class11g
					: dataAboutUser.className == "11–í"
					? class11v
					: dataAboutUser.className == "11–ê"
					? class11a
					: [];
			if (
				classArr[dataAboutUser.weekday - 1] &&
				classArr[dataAboutUser.weekday - 1].filter((item) => item !== "")
					.length > 0 &&
				dataAboutUser.weekday != 0
			) {
				for (
					let i = 0;
					i < classArr[dataAboutUser.weekday - 1].length;
					i++
				) {
					if (
						classArr[dataAboutUser.weekday - 1][i] &&
						classArr[dataAboutUser.weekday - 1][i] != "" &&
						((i + 1 == 1 &&
							dateNowHHMM >= 700 &&
							dateNowHHMM < 910 &&
							dataAboutUser.weekday == dayW) ||
							(i + 1 == 2 &&
								dateNowHHMM >= 925 &&
								dateNowHHMM < 1005 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 3 &&
								dateNowHHMM >= 1025 &&
								dateNowHHMM < 1105 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 4 &&
								dateNowHHMM >= 1125 &&
								dateNowHHMM < 1205 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 5 &&
								dateNowHHMM >= 1220 &&
								dateNowHHMM < 1300 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 6 &&
								dateNowHHMM >= 1315 &&
								dateNowHHMM < 1355 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 7 &&
								dateNowHHMM >= 1410 &&
								dateNowHHMM < 1450 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 8 &&
								dateNowHHMM >= 1505 &&
								dateNowHHMM < 1545 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 9 &&
								dateNowHHMM >= 1600 &&
								dateNowHHMM < 1640 &&
								dataAboutUser.weekday == dayW))
					)
						raspisanieText += `${i + 1}. <u>${classArr[
							dataAboutUser.weekday - 1
						][i].trim()}</u>\n`;
					else if (
						classArr[dataAboutUser.weekday - 1][i] &&
						classArr[dataAboutUser.weekday - 1][i] != ""
					)
						if (
							(i + 1 == 1 &&
								dateNowHHMM >= 910 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 2 &&
								dateNowHHMM >= 1005 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 3 &&
								dateNowHHMM >= 1105 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 4 &&
								dateNowHHMM >= 1205 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 5 &&
								dateNowHHMM >= 1300 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 6 &&
								dateNowHHMM >= 1355 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 7 &&
								dateNowHHMM >= 1450 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 8 &&
								dateNowHHMM >= 1545 &&
								dataAboutUser.weekday == dayW) ||
							(i + 1 == 9 &&
								dateNowHHMM >= 1640 &&
								dataAboutUser.weekday == dayW)
						) {
							raspisanieText += `${i + 1}. <s>${classArr[
								dataAboutUser.weekday - 1
							][i].trim()}</s>\n`;
						} else
							raspisanieText += `${i + 1}. ${classArr[
								dataAboutUser.weekday - 1
							][i].trim()}\n`;
				}
			}

			await bot.editMessageText(
				`<b><i><a href="https://t.me/${BotName}/?start=minidetail8">üìÜ</a> –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</i> ‚Ä¢ <a href = "https://t.me/${BotName}/?start=editclass">${
					dataAboutUser.className
				}</a> üìö\n\n${weekDayNamesSHORT[dataAboutUser.weekday]} ‚Ä¢ ${
					classArr[dataAboutUser.weekday - 1] &&
					classArr[dataAboutUser.weekday - 1].filter((item) => item !== "")
						.length
						? `${
								classArr[dataAboutUser.weekday - 1].filter(
									(item) => item !== ""
								).length
						  } ${
								classArr[dataAboutUser.weekday - 1].filter(
									(item) => item !== ""
								).length == 1
									? "–∑–∞–Ω—è—Ç–∏–µ"
									: `${
											classArr[dataAboutUser.weekday - 1].filter(
												(item) => item !== ""
											).length >= 2 &&
											classArr[dataAboutUser.weekday - 1].filter(
												(item) => item !== ""
											).length <= 4
												? "–∑–∞–Ω—è—Ç–∏—è"
												: `${
														classArr[
															dataAboutUser.weekday - 1
														].filter((item) => item !== "")
															.length >= 5 &&
														classArr[
															dataAboutUser.weekday - 1
														].filter((item) => item !== "")
															.length <= 20
															? "–∑–∞–Ω—è—Ç–∏–π"
															: ``
												  }`
									  }`
						  }`
						: "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"
				}\n\n${
					raspisanieText == ""
						? "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π! üòâ"
						: `${raspisanieText}\n${
								raspisanieText != ""
									? `<a href="https://t.me/${BotName}/?start=callson${dataAboutUser.weekday}">–ó–≤–æ–Ω–∫–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å</a>`
									: ""
						  }`
				}</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "‚¨ÖÔ∏è",
									callback_data: "previousweekday",
								},
								{
									text: `${
										dataAboutUser.weekday == dayW
											? `–°–µ–≥–æ–¥–Ω—è`
											: `${weekDayNamesSHORT[dataAboutUser.weekday]}`
									}`,
									callback_data: "raspisanie",
								},
								{
									text: "‚û°Ô∏è",
									callback_data: "nextweekday",
								},
							],

							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "exit" },
								{
									text: "–ü—Ä–µ–¥–º–µ—Ç—ã üìô",
									callback_data: "allsubjects",
								},
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function allSubjectsCount(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	dataAboutUser.userAction = "RaspisanieText";

	try {
		const classArr =
			dataAboutUser.className == "10–ì"
				? class10g
				: dataAboutUser.className == "10–ë"
				? class10b
				: dataAboutUser.className == "10–ê"
				? class10a
				: dataAboutUser.className == "11–î"
				? class11d
				: dataAboutUser.className == "11–ì"
				? class11g
				: dataAboutUser.className == "11–í"
				? class11v
				: dataAboutUser.className == "11–ê"
				? class11a
				: [];

		if (dataAboutUser.className != "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" && classArr.length > 0) {
			const subjectsCount = {};

			let j = 0;
			classArr.forEach((week) => {
				week.forEach((subject) => {
					const subjectKey = subject.trim();
					j++;
					if (subjectKey in subjectsCount) {
						subjectsCount[subjectKey]++;
					} else {
						subjectsCount[subjectKey] = 1;
					}
				});
			});

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
			const sortedSubjects = Object.entries(subjectsCount).sort(
				(a, b) => b[1] - a[1]
			);

			let text = "";
			let i = 1;
			sortedSubjects.forEach(([subject, count]) => {
				if (subject != "") {
					text += `<b>${i}. </b> ${subject}: <b>${count}—à—Ç</b>\n`;
					i++;
				}
			});

			bot.editMessageText(
				`<b><i>üìã –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã  ‚Ä¢  </i>${
					dataAboutUser.className
				} üìô\n\n</b>${text}\n–í—Å–µ–≥–æ: <b> ${i - 1} ${
					i - 1 >= 5 && i - 1 <= 20
						? "–ø—Ä–µ–¥–º–µ—Ç–æ–≤"
						: `${
								(i - 1) % 10 == 1
									? "–ø—Ä–µ–¥–º–µ—Ç"
									: `${
											(i - 1) % 10 >= 2 && (i - 1) % 10 <= 4
												? "–ø—Ä–µ–¥–º–µ—Ç–∞"
												: ``
									  }`
						  }`
				}</b>\n–í –Ω–µ–¥–µ–ª—é: <b>${j} ${
					i - 1 >= 5 && i - 1 <= 20
						? "–ø—Ä–µ–¥–º–µ—Ç–æ–≤"
						: `${
								(i - 1) % 10 == 1
									? "–ø—Ä–µ–¥–º–µ—Ç"
									: `${
											(i - 1) % 10 >= 2 && (i - 1) % 10 <= 4
												? "–ø—Ä–µ–¥–º–µ—Ç–∞"
												: ``
									  }`
						  }`
				}</b>`,
				{
					parse_mode: "HTML",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "today" }],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function netClassaText(chatId, exitMenu = true) {
	try {
		if (exitMenu) {
			await bot.editMessageText(
				`*–ì—Ä—É—Å—Ç–Ω–æ —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–≤–∞—Ç—å, –Ω–æ –≤–∏–¥–∏–º–æ –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–π –∫–ª–∞—Å—Å –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã _"–¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã"_ ü´§\n\n–ù–æ\\! –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å @digfusionsupport, –∏ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\\! üòâ*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "chooseclass0" },
								{
									text: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠",
									url: "https://t.me/digfusionsupport",
								},
								,
							],
						],
					},
				}
			);
		} else if (!exitMenu) {
			await bot.editMessageText(
				`*–ì—Ä—É—Å—Ç–Ω–æ —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–≤–∞—Ç—å, –Ω–æ –≤–∏–¥–∏–º–æ –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–π –∫–ª–∞—Å—Å –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã _"–¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã"_ ü´§\n\n–ù–æ\\! –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å @digfusionsupport, –∏ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\\! üòâ*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ö –≤—ã–±–æ—Ä—É", callback_data: "chooseclass1" },
								{
									text: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠",
									url: "https://t.me/digfusionsupport",
								},
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function foodMenu(
	chatId,
	dayForFoodMenu = usersData.find((obj) => obj.chatId == chatId).weekday
) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
	const dateNowHHMM = new Date().getHours() * 100 + new Date().getMinutes();

	const dataAboutDining = diningRoomData.find(
		(obj) =>
			obj.botName == BotName && obj.weekdayMenu == dataAboutUser.weekday
	);

	try {
		dataAboutUser.weekday = dayForFoodMenu;
		dataAboutUser.userAction = "foodMenu";

		if (dataAboutUser.schoolName) {
			await bot.editMessageText(
				`<b><i>üçú –°—Ç–æ–ª–æ–≤–∞—è</i> ‚Ä¢ ${
					weekDayNamesSHORT[dataAboutUser.weekday]
				} ‚Ä¢ <a href = "https://t.me/${BotName}/?start=editclass">${
					dataAboutUser.schoolName == "27c2"
						? "‚Ññ27–∫2"
						: `${
								dataAboutUser.schoolName == "27c1"
									? "‚Ññ27–∫1"
									: `–ù–µ —É–∫–∞–∑–∞–Ω–æ`
						  }`
				}</a></b> üòã\n\n${
					dataAboutUser.weekday != 6 && dataAboutUser.weekday != 0
						? `<b><i>‚Ä¢ ${
								dateNowHHMM >= 925 &&
								dateNowHHMM < 1105 &&
								dayW != 6 &&
								dayW != 0
									? "<u>–ó–∞–≤—Ç—Ä–∞–∫</u>"
									: "–ó–∞–≤—Ç—Ä–∞–∫"
						  }:</i>\n\n</b>${
								dataAboutUser.schoolName == "27c2"
									? `${foodmenu27c2[dataAboutUser.weekday - 1][0]}`
									: `${
											dataAboutUser.schoolName == "27c1"
												? `${
														foodmenu27c1[
															dataAboutUser.weekday - 1
														][0]
												  }`
												: `–ù–µ —É–∫–∞–∑–∞–Ω–æ`
									  }`
						  }<b>\n\n<i>‚Ä¢ ${
								dateNowHHMM >= 1300 &&
								dateNowHHMM < 1505 &&
								dayW != 6 &&
								dayW != 0
									? "<u>–û–±–µ–¥</u>"
									: "–û–±–µ–¥"
						  }:</i>\n\n</b>${
								dataAboutUser.schoolName == "27c2"
									? `${foodmenu27c2[dataAboutUser.weekday - 1][1]}`
									: `${
											dataAboutUser.schoolName == "27c1"
												? `${
														foodmenu27c1[
															dataAboutUser.weekday - 1
														][1]
												  }`
												: `–ù–µ —É–∫–∞–∑–∞–Ω–æ`
									  }`
						  }\n\n<b>–†–µ–π—Ç–∏–Ω–≥ –µ–¥—ã —Å–µ–≥–æ–¥–Ω—è:\n<a href="https://t.me/${BotName}/?start=ratelikeonfood">üëç</a>${
								dataAboutDining.countOfLikesOnFood
						  }   <a href="https://t.me/${BotName}/?start=rateneutralonfood">üòë</a>${
								dataAboutDining.countOfNeutralOnFood
						  }   <a href="https://t.me/${BotName}/?start=ratedislikeonfood">üëé</a>${
								dataAboutDining.countOfDislikesOnFood
						  }</b>`
						: `<b>–°–µ–≥–æ–¥–Ω—è —Å—Ç–æ–ª–æ–≤–∞—è –∑–∞–∫—Ä—ã—Ç–∞! ü§∑‚Äç‚ôÇÔ∏è</b>`
				}`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "‚¨ÖÔ∏è",
									callback_data: "foodmenupreviousday",
								},
								{
									text: `${
										dataAboutUser.weekday == dayW
											? `–°–µ–≥–æ–¥–Ω—è`
											: `${weekDayNamesSHORT[dataAboutUser.weekday]}`
									}`,
									callback_data: "foodmenutoday",
								},
								{
									text: "‚û°Ô∏è",
									callback_data: "foodmenunextday",
								},
							],

							[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "exit" }],
						],
					},
				}
			);
		} else {
			await bot.editMessageText(
				`<b><i>üçú –°—Ç–æ–ª–æ–≤–∞—è üòã\n\n–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∫–æ–ª—É‚ùó</i></b>\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ <b>–∫–ª–∞—Å—Å!</b> üòâ`,
				{
					parse_mode: "html",
					chat_id: chatId,
					disable_web_page_preview: true,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "exit" },
								{ text: "–í—ã–±—Ä–∞—Ç—å ‚öôÔ∏è", callback_data: "chooseclass0" },
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function Calls(
	chatId,
	dayForCalls = usersData.find((obj) => obj.chatId == chatId).weekday
) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
	try {
		const dateNowHHMM = new Date().getHours() * 100 + new Date().getMinutes();
		dataAboutUser.weekday = dayForCalls;
		dataAboutUser.userAction = "Calls";

		let countCalls = 0;
		if (dataAboutUser.callOnLesson) countCalls++;
		if (dataAboutUser.callOnBreak) countCalls++;
		if (dataAboutUser.callOnLessonIn5minutes) countCalls++;
		if (dataAboutUser.callOnLessonIn10minutes) countCalls++;
		if (dataAboutUser.callOnBreakIn5minutes) countCalls++;
		if (dataAboutUser.callOnBreakIn10minutes) countCalls++;

		const classArr =
			dataAboutUser.className == "10–ì"
				? class10g
				: dataAboutUser.className == "10–ë"
				? class10b
				: dataAboutUser.className == "10–ê"
				? class10a
				: dataAboutUser.className == "11–î"
				? class11d
				: dataAboutUser.className == "11–ì"
				? class11g
				: dataAboutUser.className == "11–í"
				? class11v
				: dataAboutUser.className == "11–ê"
				? class11a
				: [];

		if (dataAboutUser.className == "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" || classArr == []) {
			await bot.editMessageText(
				`<b><i>‚è∞ –ó–≤–æ–Ω–∫–∏ üïì\n\n–ù–µ –Ω–∞—Ö–æ–∂—É —Ç–≤–æ–π –∫–ª–∞—Å—Å‚ùó</i></b>\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ <b>–≤—ã–±–µ—Ä–∏</b> –µ–≥–æ! üòâ`,
				{
					parse_mode: "html",
					chat_id: chatId,
					disable_web_page_preview: true,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
								{ text: "–í—ã–±—Ä–∞—Ç—å ‚öôÔ∏è", callback_data: "chooseclass0" },
							],
						],
					},
				}
			);
		} else {
			// –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–æ–≤

			let startTime = "";
			if (
				classArr &&
				classArr[dataAboutUser.weekday - 1] &&
				classArr[dataAboutUser.weekday - 1].length > 0
			) {
				if (
					classArr[dataAboutUser.weekday - 1].find(
						(className) => className !== ""
					)
				) {
					if (
						classArr[dataAboutUser.weekday - 1].indexOf(
							classArr[dataAboutUser.weekday - 1].find(
								(className) => className !== ""
							)
						) !== -1
					) {
						startTime =
							timesOnLesson[
								classArr[dataAboutUser.weekday - 1].indexOf(
									classArr[dataAboutUser.weekday - 1].find(
										(className) => className !== ""
									)
								)
							];
					}
				}
			}
			// –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–æ–≤

			let endTime = "";
			if (
				classArr[dataAboutUser.weekday - 1] &&
				classArr[dataAboutUser.weekday - 1].length > 0
			) {
				if (
					classArr[dataAboutUser.weekday - 1].filter(
						(className) => className !== ""
					).length > 0 &&
					classArr[dataAboutUser.weekday - 1].indexOf(
						classArr[dataAboutUser.weekday - 1].filter(
							(className) => className !== ""
						)[
							classArr[dataAboutUser.weekday - 1].filter(
								(className) => className !== ""
							).length - 1
						]
					) !== -1
				) {
					endTime =
						timesOnBreak[
							classArr[dataAboutUser.weekday - 1].indexOf(
								classArr[dataAboutUser.weekday - 1].filter(
									(className) => className !== ""
								)[
									classArr[dataAboutUser.weekday - 1].filter(
										(className) => className !== ""
									).length - 1
								]
							)
						];
				}
			}

			await bot.editMessageText(
				`<b><i>‚è∞ –ó–≤–æ–Ω–∫–∏</i> ‚Ä¢ <a href ="https://t.me/${BotName}/?start=editclass">${
					dataAboutUser.className
				}</a> ‚Ä¢ ${weekDayNamesSHORT[dataAboutUser.weekday]} üïì\n</b>${
					classArr[dataAboutUser.weekday - 1] &&
					classArr[dataAboutUser.weekday - 1].filter((item) => item !== "")
						.length > 0
						? `\n<i>–ù–∞—á–∞–ª–æ –≤ <b>${startTime}</b></i>\n${
								classArr[dataAboutUser.weekday - 1][0] &&
								classArr[dataAboutUser.weekday - 1][0] !== ""
									? `\n - ${
											dateNowHHMM >= 815 &&
											dateNowHHMM < 855 &&
											dataAboutUser.weekday == dayW
												? "<u><b>1</b> —É—Ä–æ–∫ <b>08:15 - 08:55</b></u>"
												: "<b>1</b> —É—Ä–æ–∫ <b>08:15 - 08:55</b>"
									  }\n`
									: ""
						  }${
								classArr[dataAboutUser.weekday - 1][1] &&
								classArr[dataAboutUser.weekday - 1][1] !== ""
									? `\n - ${
											dateNowHHMM >= 910 &&
											dateNowHHMM < 950 &&
											dataAboutUser.weekday == dayW
												? "<u><b>2</b> —É—Ä–æ–∫ <b>09:10 - 09:50</b></u>"
												: "<b>2</b> —É—Ä–æ–∫ <b>09:10 - 09:50</b>"
									  }\n`
									: ""
						  }${
								classArr[dataAboutUser.weekday - 1][2] &&
								classArr[dataAboutUser.weekday - 1][2] !== ""
									? `\n - ${
											dateNowHHMM >= 1005 &&
											dateNowHHMM < 1045 &&
											dataAboutUser.weekday == dayW
												? "<u><b>3</b> —É—Ä–æ–∫ <b>10:05 - 10:45</b></u>"
												: "<b>3</b> —É—Ä–æ–∫ <b>10:05 - 10:45</b>"
									  }\n`
									: ""
						  }${
								classArr[dataAboutUser.weekday - 1][3] &&
								classArr[dataAboutUser.weekday - 1][3] !== ""
									? `\n - ${
											dateNowHHMM >= 1050 &&
											dateNowHHMM < 1130 &&
											dataAboutUser.weekday == dayW
												? "<u><b>4</b> —É—Ä–æ–∫ <b>10:50 - 11:30</b></u>"
												: "<b>4</b> —É—Ä–æ–∫ <b>10:50 - 11:30</b>"
									  }\n`
									: ""
						  }${
								classArr[dataAboutUser.weekday - 1][4] &&
								classArr[dataAboutUser.weekday - 1][4] !== ""
									? `\n - ${
											dateNowHHMM >= 1145 &&
											dateNowHHMM < 1225 &&
											dataAboutUser.weekday == dayW
												? "<u><b>5</b> —É—Ä–æ–∫ <b>11:45 - 12:25</b></u>"
												: "<b>5</b> —É—Ä–æ–∫ <b>11:45 - 12:25</b>"
									  }\n`
									: ""
						  }${
								classArr[dataAboutUser.weekday - 1][5] &&
								classArr[dataAboutUser.weekday - 1][5] !== ""
									? `\n - ${
											dateNowHHMM >= 1245 &&
											dateNowHHMM < 1325 &&
											dataAboutUser.weekday == dayW
												? "<u><b>6</b> —É—Ä–æ–∫ <b>12:45 - 13:25</b></u>"
												: "<b>6</b> —É—Ä–æ–∫ <b>12:45 - 13:25</b>"
									  }\n`
									: ""
						  }${
								classArr[dataAboutUser.weekday - 1][6] &&
								classArr[dataAboutUser.weekday - 1][6] !== ""
									? `\n - ${
											dateNowHHMM >= 1330 &&
											dateNowHHMM < 1410 &&
											dataAboutUser.weekday == dayW
												? "<u><b>7</b> —É—Ä–æ–∫ <b>13:30 - 14:10</b></u>"
												: "<b>7</b> —É—Ä–æ–∫ <b>13:30 - 14:10</b>"
									  }\n`
									: ""
						  }\n<i>–î–æ–º–æ–π –≤ <b>${endTime}</b></i>\n\n<b><a href= "https://t.me/${BotName}/?start=raspisanieon${
								dataAboutUser.weekday
						  }">–£—Ä–æ–∫–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å</a></b>`
						: "<b>\n–°–µ–≥–æ–¥–Ω—è –∑–≤–æ–Ω–∫–∏ –Ω–µ –∑–≤–µ–Ω—è—Ç! üòâ</b>"
				}`,
				{
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					parse_mode: "html",
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è", callback_data: "previousweekdaycalls" },
								{
									text: `${
										dataAboutUser.weekday == dayW
											? `–°–µ–≥–æ–¥–Ω—è`
											: `${weekDayNamesSHORT[dataAboutUser.weekday]}`
									}`,
									callback_data: "todaycalls",
								},
								{ text: "‚û°Ô∏è", callback_data: "nextweekdaycalls" },
							],
							[
								{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
								{
									text: `–ü–æ–≤—Ç–æ—Ä ${
										countCalls > 0 ? `(${countCalls})` : ""
									} üîî`,
									callback_data: "callsnotificationsmenu",
								},
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function NotificationsMenuCalls(
	chatId,
	callOnLesson = usersData.find((obj) => obj.chatId == chatId).callOnLesson,
	callOnBreak = usersData.find((obj) => obj.chatId == chatId).callOnBreak,
	callOnLessonIn5minutes = usersData.find((obj) => obj.chatId == chatId)
		.callOnLessonIn5minutes,
	callOnBreakIn5minutes = usersData.find((obj) => obj.chatId == chatId)
		.callOnBreakIn5minutes,
	callOnLessonIn10minutes = usersData.find((obj) => obj.chatId == chatId)
		.callOnLessonIn10minutes,
	callOnBreakIn10minutes = usersData.find((obj) => obj.chatId == chatId)
		.callOnBreakIn10minutes
) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	// –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

	dataAboutUser.callOnLesson = callOnLesson;
	dataAboutUser.callOnBreak = callOnBreak;
	dataAboutUser.callOnLessonIn5minutes = callOnLessonIn5minutes;
	dataAboutUser.callOnBreakIn5minutes = callOnBreakIn5minutes;
	dataAboutUser.callOnLessonIn10minutes = callOnLessonIn10minutes;
	dataAboutUser.callOnBreakIn10minutes = callOnBreakIn10minutes;

	let countOnLesson = 0;
	let countOnBreak = 0;

	if (dataAboutUser.callOnLesson) countOnLesson++;
	if (dataAboutUser.callOnLessonIn5minutes) countOnLesson++;
	if (dataAboutUser.callOnLessonIn10minutes) countOnLesson++;
	if (dataAboutUser.callOnBreak) countOnBreak++;
	if (dataAboutUser.callOnBreakIn5minutes) countOnBreak++;
	if (dataAboutUser.callOnBreakIn10minutes) countOnBreak++;
	try {
		await bot.editMessageText(
			`*_${
				dataAboutUser.callOnBreak ||
				dataAboutUser.callOnLesson ||
				dataAboutUser.callOnBreakIn5minutes ||
				dataAboutUser.callOnLessonIn5minutes ||
				dataAboutUser.callOnBreakIn10minutes ||
				dataAboutUser.callOnLessonIn10minutes
					? "üîî –ü–æ–≤—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üîî"
					: "üîï –ü–æ–≤—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üîï"
			}\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:_\n*–ù–∞ —É—Ä–æ–∫: *${
				dataAboutUser.callOnLesson ? "—Å—Ä–∞–∑—É" : ""
			}${
				dataAboutUser.callOnLesson && dataAboutUser.callOnLessonIn5minutes
					? ", "
					: `${
							dataAboutUser.callOnLesson &&
							dataAboutUser.callOnLessonIn10minutes
								? ", "
								: ""
					  }`
			}${dataAboutUser.callOnLessonIn5minutes ? "–∑–∞ 5" : ""}${
				dataAboutUser.callOnLessonIn5minutes &&
				dataAboutUser.callOnLessonIn10minutes
					? " –∏ "
					: ""
			}${dataAboutUser.callOnLessonIn10minutes ? "–∑–∞ 10" : ""}${
				!dataAboutUser.callOnLesson &&
				!dataAboutUser.callOnLessonIn5minutes &&
				!dataAboutUser.callOnLessonIn10minutes
					? "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
					: `${
							dataAboutUser.callOnLesson &&
							!dataAboutUser.callOnLessonIn5minutes &&
							!dataAboutUser.callOnLessonIn10minutes
								? ""
								: " –º–∏–Ω—É—Ç"
					  }`
			}*\n–ù–∞ –ø–µ—Ä–µ–º–µ–Ω—É: *${dataAboutUser.callOnBreak ? "—Å—Ä–∞–∑—É" : ""}${
				dataAboutUser.callOnBreak && dataAboutUser.callOnBreakIn5minutes
					? ", "
					: `${
							dataAboutUser.callOnBreak &&
							dataAboutUser.callOnBreakIn10minutes
								? ", "
								: ""
					  }`
			}${dataAboutUser.callOnBreakIn5minutes ? "–∑–∞ 5" : ""}${
				dataAboutUser.callOnBreakIn5minutes &&
				dataAboutUser.callOnBreakIn10minutes
					? " –∏ "
					: ""
			}${dataAboutUser.callOnBreakIn10minutes ? "–∑–∞ 10" : ""}${
				!dataAboutUser.callOnBreak &&
				!dataAboutUser.callOnBreakIn5minutes &&
				!dataAboutUser.callOnBreakIn10minutes
					? "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
					: `${
							dataAboutUser.callOnBreak &&
							!dataAboutUser.callOnBreakIn5minutes &&
							!dataAboutUser.callOnBreakIn10minutes
								? ""
								: " –º–∏–Ω—É—Ç"
					  }`
			}\n\n${
				dayW == 6 || dayW == 0
					? "_‚ùó–ó–≤–æ–Ω–∫–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã \\- –≤—ã—Ö–æ–¥–Ω–æ–π‚ùó_\n\n"
					: "_‚ùó–ü–†–û–í–ï–†–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø‚ùó_\n\n"
			}–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ –∑–≤–æ–Ω–∫–∞ –æ–ø–æ–≤–µ—â–∞—Ç—å\\?* ü§î`,
			{
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `–ù–∞ —É—Ä–æ–∫: ${countOnLesson}`,
								callback_data: "-",
							},
							{
								text: `–ù–∞ –ø–µ—Ä–µ–º–µ–Ω—É: ${countOnBreak}`,
								callback_data: "-",
							},
						],
						[
							{
								text: `–í –º–æ–º–µ–Ω—Ç ${
									dataAboutUser.callOnLesson ? "‚úÖ" : ""
								}`,
								callback_data: "toggle–°allOnLesson",
							},
							{
								text: `–í –º–æ–º–µ–Ω—Ç ${
									dataAboutUser.callOnBreak ? "‚úÖ" : ""
								}`,
								callback_data: "toggle–°allOnBreak",
							},
						],
						[
							{
								text: `–ó–∞ 5 –º–∏–Ω ${
									dataAboutUser.callOnLessonIn5minutes ? "‚úÖ" : ""
								}`,
								callback_data: "toggle–°allOnLessonIn5minutes",
							},
							{
								text: `–ó–∞ 5 –º–∏–Ω ${
									dataAboutUser.callOnBreakIn5minutes ? "‚úÖ" : ""
								}`,
								callback_data: "toggle–°allOnBreakIn5minutes",
							},
						],
						[
							{
								text: `–ó–∞ 10 –º–∏–Ω ${
									dataAboutUser.callOnLessonIn10minutes ? "‚úÖ" : ""
								}`,
								callback_data: "toggle–°allOnLessonIn10minutes",
							},
							{
								text: `–ó–∞ 10 –º–∏–Ω ${
									dataAboutUser.callOnBreakIn10minutes ? "‚úÖ" : ""
								}`,
								callback_data: "toggle–°allOnBreakIn10minutes",
							},
						],

						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "calls" },
							{
								text: `${
									dataAboutUser.callOnLesson ||
									dataAboutUser.callOnBreak ||
									dataAboutUser.callOnLessonIn5minutes ||
									dataAboutUser.callOnLessonIn10minutes ||
									dataAboutUser.callOnBreakIn5minutes ||
									dataAboutUser.callOnBreakIn10minutes
										? "–°–±—Ä–æ—Å ‚ùå"
										: ""
								}`,
								callback_data: "resetallcalls",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function Games(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "menuHome";
		await bot.editMessageText(
			`<b><i>üòÜ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üïπÔ∏è</i>${
				dataAboutUser.game1NiceResults + dataAboutUser.game1BadResults >
					dataAboutUser.game2NiceResults +
						dataAboutUser.game2BadResults +
						dataAboutUser.game2DrawResults &&
				dataAboutUser.game1NiceResults + dataAboutUser.game1BadResults >
					dataAboutUser.game3NiceResults +
						dataAboutUser.game3BadResults +
						dataAboutUser.game3DrawResults
					? "</b>\n\n–õ—é–±–∏–º–∞—è: <b>–£–≥–∞–¥–∞–π-–∫–∞ ‚ùì"
					: `${
							dataAboutUser.game2NiceResults +
								dataAboutUser.game2BadResults +
								dataAboutUser.game2DrawResults >
								dataAboutUser.game1NiceResults +
									dataAboutUser.game1BadResults &&
							dataAboutUser.game2NiceResults +
								dataAboutUser.game2BadResults +
								dataAboutUser.game2DrawResultss >
								dataAboutUser.game3NiceResults +
									dataAboutUser.game3BadResults +
									dataAboutUser.game3DrawResults
								? "</b>\n\n–õ—é–±–∏–º–∞—è: <b>–¶—É–µ-–§–∞ ‚úåÔ∏è"
								: `${
										dataAboutUser.game3NiceResults +
											dataAboutUser.game3BadResults +
											dataAboutUser.game3DrawResults >
											dataAboutUser.game1NiceResults +
												dataAboutUser.game1BadResults &&
										dataAboutUser.game3NiceResults +
											dataAboutUser.game3BadResults +
											dataAboutUser.game3DrawResults >
											dataAboutUser.game2NiceResults +
												dataAboutUser.game2BadResults +
												dataAboutUser.game2DrawResults
											? "</b>\n\n–õ—é–±–∏–º–∞—è: <b>‚ùå –ö—Ä-–ù–æ–ª–∏–∫–∏ ‚≠ï"
											: ""
								  }`
					  }`
			}\n\n–í–æ —á—Ç–æ —Å—ã–≥—Ä–∞–µ–º? ü§î</b>`,
			{
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				parse_mode: "html",
				reply_markup: {
					inline_keyboard: [
						[{ text: "‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏ ‚≠ï", callback_data: "game3" }],
						[
							{ text: "–£–≥–∞–¥–∞–π-–∫–∞ ‚ùì", callback_data: "game1" },
							{ text: "–¶—É–µ-–§–∞ ‚úåÔ∏è", callback_data: "game2" },
						],
						// [{ text: "–†–µ–π—Ç–∏–Ω–≥ ü•á", callback_data: "bestplayerslist" }],
						[{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" }],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function game1(chatId, startGame = true) {
	try {
		if (startGame)
			//? –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
			rndNum = Math.floor(Math.random() * 10);
		bot.editMessageText(
			`*_‚ùì –£–≥–∞–¥–∞–π\\-–∫–∞ ‚ùì_\n\n–Ø –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É\\! ${
				chatId == qu1z3xId ? rndNum : ""
			}\n\n–û—Ç–≥–∞–¥—ã–≤–∞–π üòâ*`,
			{
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "1", callback_data: "1" },
							{ text: "2", callback_data: "2" },
							{ text: "3", callback_data: "3" },
						],
						[
							{ text: "4", callback_data: "4" },
							{ text: "5", callback_data: "5" },
							{ text: "6", callback_data: "6" },
						],
						[
							{ text: "7", callback_data: "7" },
							{ text: "8", callback_data: "8" },
							{ text: "9", callback_data: "9" },
						],
						[
							{ text: "‚¨ÖÔ∏è", callback_data: "games" },
							{ text: "0", callback_data: "0" },
							{ text: "üí°", callback_data: "hint" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function game2(chatId) {
	try {
		await bot.editMessageText(
			"*_‚úã –¶—É–µ\\-–§–∞ ‚úåÔ∏è_\n\n–°–æ–ø–µ—Ä–Ω–∏–∫ —É–∂–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ‚ùóüò•\n\n–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å‚ùì*",
			{
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚úä", callback_data: "stoneGame2" },
							{ text: "‚úåÔ∏è", callback_data: "scissorsGame2" },
							{ text: "üñêÔ∏è", callback_data: "paperGame2" },
						],
						[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" }],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function game2_2(chatId, playerNum) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	const options = ["‚úä", "‚úåÔ∏è", "üñêÔ∏è"];
	rndNum = Math.floor(Math.random() * options.length);

	try {
		if (options[playerNum - 1] == options[rndNum]) {
			bot.editMessageText(
				`*_ü™® –ö–∞–º–µ–Ω—å\\-–ù–æ–∂–Ω–∏—Ü—ã\\-–ë—É–º–∞–≥–∞ ‚úÇÔ∏è_\n\nü§∑‚Äç‚ôÇÔ∏è –ù–∏—á—å—è\\! ü§∑‚Äç‚ôÄÔ∏è\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç\\:\n üë§${
					options[playerNum - 1]
				}  vs  [${
					options[rndNum]
				}](https://t.me/${BotName}/?start=minidetail3)ü§ñ\n\n[–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞](https://t.me/${BotName}/?start=options)\n\n–ï—â–µ –ø–∞—Ä—Ç–µ–π–∫—É\\? ü§î*`,
				{
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					parse_mode: "MarkdownV2",
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game2" },
							],
						],
					},
				}
			);
			dataAboutUser.game2DrawResults += 1;
		} else if (
			(options[playerNum - 1] == "‚úä" && options[rndNum] == "‚úåÔ∏è") ||
			(options[playerNum - 1] == "‚úåÔ∏è" && options[rndNum] == "üñêÔ∏è") ||
			(options[playerNum - 1] == "üñêÔ∏è" && options[rndNum] == "‚úä")
		) {
			bot.editMessageText(
				`*_ü™® –ö–∞–º–µ–Ω—å\\-–ù–æ–∂–Ω–∏—Ü—ã\\-–ë—É–º–∞–≥–∞ ‚úÇÔ∏è_\n\nü•á –í—ã–∏–≥—Ä—ã—à\\! ü•≥\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n üë§${
					options[playerNum - 1]
				}  vs  [${
					options[rndNum]
				}](https://t.me/${BotName}/?start=minidetail3)ü§ñ\n\n[–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞](https://t.me/${BotName}/?start=options)\n\n–ï—â–µ –ø–∞—Ä—Ç–µ–π–∫—É\\? ü§î*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game2" },
							],
						],
					},
				}
			);
			dataAboutUser.game2NiceResults += 1;
		} else {
			bot.editMessageText(
				`*_ü™® –ö–∞–º–µ–Ω—å\\-–ù–æ–∂–Ω–∏—Ü—ã\\-–ë—É–º–∞–≥–∞ ‚úÇÔ∏è_\n\nü•à –ü–æ—Ä–∞–∂–µ–Ω–∏–µ\\! üòî\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n üë§${
					options[playerNum - 1]
				}  vs  [${
					options[rndNum]
				}](https://t.me/${BotName}/?start=minidetail3)ü§ñ\n\n[–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞](https://t.me/${BotName}/?start=options)\n\n–ï—â–µ –ø–∞—Ä—Ç–µ–π–∫—É\\? ü§î*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game2" },
							],
						],
					},
				}
			);
			dataAboutUser.game2BadResults += 1;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function game3(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "menuHome";
		await bot.editMessageText(
			`<b><i>‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏ ‚≠ï</i></b>\n\n–¢—ã —Ö–æ–¥–∏—à—å –∑–∞: <b>${
				dataAboutUser.game3PlayerSticker == "‚ùå"
					? "‚ùå"
					: `${
							dataAboutUser.game3PlayerSticker == "‚≠ï"
								? "‚≠ï"
								: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
					  }`
			}</b>\n–°–ª–æ–∂–Ω–æ—Å—Ç—å: <b>${
				dataAboutUser.game3Difficulty == 0
					? "–õ–µ–≥–∫–æ"
					: `${
							dataAboutUser.game3Difficulty == 2
								? "–°—Ä–µ–¥–Ω—è—è"
								: `${
										dataAboutUser.game3Difficulty == 1
											? "–¢—è–∂–µ–ª–æ"
											: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
								  }`
					  }`
			}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã ‚öôÔ∏è</b>`,
			{
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `${
									dataAboutUser.game3PlayerSticker == "‚ùå"
										? "‚Ä¢ ‚ùå ‚Ä¢"
										: "‚ùå"
								}`,
								callback_data: `${
									dataAboutUser.game3PlayerSticker == "‚ùå"
										? "-"
										: "XGame3"
								}`,
							},
							{
								text: `${
									dataAboutUser.game3PlayerSticker == "‚≠ï"
										? "‚Ä¢ ‚≠ï ‚Ä¢"
										: "‚≠ï"
								}`,
								callback_data: `${
									dataAboutUser.game3PlayerSticker == "‚≠ï"
										? "-"
										: "OGame3"
								}`,
							},
						],
						[
							{
								text: `${
									dataAboutUser.game3Difficulty == 0 ? "‚Ä¢ üò™ ‚Ä¢" : "üò™"
								}`,
								callback_data: `${
									dataAboutUser.game3Difficulty == 0
										? "-"
										: "Dificulty0Game3"
								}`,
							},
							{
								text: `${
									dataAboutUser.game3Difficulty == 2 ? "‚Ä¢ ü§® ‚Ä¢" : "ü§®"
								}`,
								callback_data: `${
									dataAboutUser.game3Difficulty == 2
										? "-"
										: "Dificulty2Game3"
								}`,
							},
							{
								text: `${
									dataAboutUser.game3Difficulty == 1 ? "‚Ä¢ üò° ‚Ä¢" : "üò°"
								}`,
								callback_data: `${
									dataAboutUser.game3Difficulty == 1
										? "-"
										: "Dificulty1Game3"
								}`,
							},
						],
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
							{
								text: `${
									dataAboutUser.game3PlayerSticker != "" &&
									dataAboutUser.game3Difficulty != 3
										? "–ò–≥—Ä–∞—Ç—å‚úÖ"
										: ""
								}`,
								callback_data: "game3_2",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function game3_2(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "game3_2";

		dataAboutUser.playerGame3Board = [
			[" ", " ", " "],
			[" ", " ", " "],
			[" ", " ", " "],
		];
		await bot.editMessageText(
			`<b><i>‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏ ‚≠ï</i>\n\n–£–¥–∞—á–∏! üòâ\n–ù–∞—á–∏–Ω–∞–µ—à—å —Ç—ã ${dataAboutUser.game3PlayerSticker}</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: " ", callback_data: "0|0" },
							{ text: " ", callback_data: "0|1" },
							{ text: " ", callback_data: "0|2" },
						],
						[
							{ text: " ", callback_data: "1|0" },
							{ text: " ", callback_data: "1|1" },
							{ text: " ", callback_data: "1|2" },
						],
						[
							{ text: " ", callback_data: "2|0" },
							{ text: " ", callback_data: "2|1" },
							{ text: " ", callback_data: "2|2" },
						],
						[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "game3" }],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

function game3Result(chatId, gameIsDraw = false) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		for (let i = 0; i < 3; i++) {
			// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
			if (
				dataAboutUser.playerGame3Board[i][0] !== " " &&
				dataAboutUser.playerGame3Board[i][0] ==
					dataAboutUser.playerGame3Board[i][1] &&
				dataAboutUser.playerGame3Board[i][1] ==
					dataAboutUser.playerGame3Board[i][2]
			) {
				return `${dataAboutUser.playerGame3Board[i][0]}`;
			}
			// –í–µ—Ä—Ç–∏–∫–∞–ª–∏
			else if (
				dataAboutUser.playerGame3Board[0][i] !== " " &&
				dataAboutUser.playerGame3Board[0][i] ==
					dataAboutUser.playerGame3Board[1][i] &&
				dataAboutUser.playerGame3Board[1][i] ==
					dataAboutUser.playerGame3Board[2][i]
			) {
				return `${dataAboutUser.playerGame3Board[0][i]}`;
				// –î–∏–æ–≥–æ–Ω–∞–ª–∏
			} else if (
				dataAboutUser.playerGame3Board[0][0] !== " " &&
				dataAboutUser.playerGame3Board[0][0] ==
					dataAboutUser.playerGame3Board[1][1] &&
				dataAboutUser.playerGame3Board[1][1] ==
					dataAboutUser.playerGame3Board[2][2]
			) {
				return `${dataAboutUser.playerGame3Board[0][0]}`;
			} else if (
				dataAboutUser.playerGame3Board[0][2] !== " " &&
				dataAboutUser.playerGame3Board[0][2] ==
					dataAboutUser.playerGame3Board[1][1] &&
				dataAboutUser.playerGame3Board[1][1] ==
					dataAboutUser.playerGame3Board[2][0]
			) {
				return `${dataAboutUser.playerGame3Board[0][2]}`;
			}
		}
		if (gameIsDraw) {
			return "–ù–∏—á—å—è!";
		}
		return null;
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
		return null;
	}
}

function game3InlineKeyboard(chatId, isPlayer = true) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
	let buttons = [];

	try {
		if (isPlayer) {
			buttons = dataAboutUser.playerGame3Board.map((row, rowIndex) => {
				return row.map((cell, colIndex) => {
					const text = cell == " " ? " " : cell;
					const callbackData = `${rowIndex}|${colIndex}`;
					return { text, callback_data: callbackData };
				});
			});
		} else if (!isPlayer) {
			buttons = dataAboutUser.playerGame3Board.map((row, rowIndex) => {
				return row.map((cell, colIndex) => {
					const text = cell == " " ? " " : cell;
					return { text, callback_data: "-" };
				});
			});
		}

		buttons.push([
			{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "game3" },
			{ text: "–ó–∞–Ω–æ–≤–æüîÑÔ∏è", callback_data: "game3_2" },
		]);

		return { inline_keyboard: buttons };
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

function checkUsersActivity() {
	try {
		for (let i = 0; i < usersData.length; i++) {
			const currentTime = Date.now();

			if (
				currentTime - usersData[i].lastActivity >=
					7 * 24 * 60 * 60 * 1000 &&
				currentTime - usersData[i].lastActivity < 9 * 24 * 60 * 60 * 1000 &&
				!usersData[i].reminderForReturn1
			) {
				if (usersData[i].remindersForReturnIsActive) {
					usersData[i].reminderForReturn1 = true;
					sendNotificationForReturn(usersData[i].chatId);
					console.log(1);
				}
			} else if (
				currentTime - usersData[i].lastActivity >=
					9 * 24 * 60 * 60 * 1000 &&
				currentTime - usersData[i].lastActivity <
					13 * 24 * 60 * 60 * 1000 &&
				!usersData[i].reminderForReturn2
			) {
				if (usersData[i].remindersForReturnIsActive) {
					usersData[i].reminderForReturn2 = true;
					sendNotificationForReturn(usersData[i].chatId);
				}
			} else if (
				currentTime - usersData[i].lastActivity >=
					13 * 24 * 60 * 60 * 1000 &&
				currentTime - usersData[i].lastActivity <
					16 * 24 * 60 * 60 * 1000 &&
				!usersData[i].reminderForReturn3
			) {
				if (usersData[i].remindersForReturnIsActive) {
					usersData[i].reminderForReturn3 = true;
					sendNotificationForReturn(usersData[i].chatId);
				}
			} else if (
				currentTime - usersData[i].lastActivity >=
					16 * 24 * 60 * 60 * 1000 &&
				!usersData[i].reminderForReturn4
			) {
				if (usersData[i].remindersForReturnIsActive) {
					usersData[i].reminderForReturn4 = true;
					sendNotificationForReturn(usersData[i].chatId);
				}
			}
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

function sendNotificationForReturn(chatId) {
	const textsForUsersReturn = [
		"–ë–µ–∑ —Ç–µ–±—è —Å–æ–≤—Å–µ–º –Ω–µ —Ç–æ! –ù–µ –ø—Ä–æ–ø–∞–¥–∞–π, –∑–∞–≥–ª—è–Ω–∏ –∫–∞–∫ —Å–º–æ–∂–µ—à—å! üôè",
		"–ë–µ–∑ —Ç–≤–æ–µ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è —á—Ç–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç! –ó–∞–≥–ª—è–¥—ã–≤–∞–π, –∫–æ–≥–¥–∞ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤—Ä–µ–º—è! üòâ",
		"–ê –∫–∞–∫–æ–π –≤ —Å—Ä–µ–¥—É 3-–π —É—Ä–æ–∫? –Ø –º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üòâ",
		"–ú—ã –¥–∞–≤–Ω–æ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å! –ó–∞—Ö–æ–¥–∏ –ø–æ—á–∞—â–µ! üôè",
		"–ú–æ—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –ø–∞–º—è—Ç—å –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ç–µ–±—è —Å–æ –º–Ω–æ–π –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ! ‚òπÔ∏è",
	];
	let rndNum = Math.floor(Math.random() * textsForUsersReturn.length);

	try {
		bot.sendMessage(chatId, `<b>${textsForUsersReturn[rndNum]}</b>`, {
			parse_mode: "html",
			disable_web_page_preview: true,
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: "–û—Ç–∫–ª—é—á–∏—Ç—å üîï",
							callback_data: `remindersforreturnOff`,
						},
						{
							text: "–£–¥–∞–ª–∏—Ç—å ‚ùå",
							callback_data: `deleteexcess`,
						},
					],
				],
			},
		});
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function News(chatId, newsNum, newsName) {
	let news1Button, news2Button, news3Button;

	let newsButtons = [
		{ text: "–ù–æ–≤–æ—Å—Ç–∏ üìñ", callback_data: "news" },
		{ text: "‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ üìñ ‚Ä¢", callback_data: "-" },
		{ text: "–û –±–æ—Ç–µ ü§ñ", callback_data: "botnews" },
		{ text: "‚Ä¢ –û –±–æ—Ç–µ ü§ñ ‚Ä¢", callback_data: "-" },
		{ text: "–û —à–∫–æ–ª–µ üè´", callback_data: "schoolnews" },
		{ text: "‚Ä¢ –û —à–∫–æ–ª–µ üè´ ‚Ä¢", callback_data: "-" },
	];

	if (newsNum == 1) {
		news1Button = 1;
		news2Button = 2;
		news3Button = 4;
	} else if (newsNum == 2) {
		news1Button = 0;
		news2Button = 3;
		news3Button = 4;
	} else if (newsNum == 3) {
		news1Button = 0;
		news2Button = 2;
		news3Button = 5;
	}

	try {
		await bot.editMessageText(
			`<b><i>‚ùó –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ | ${newsName}</i></b>\n\n${newsText[newsNum]}\n\n<b>‚Ä¢ –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∫ @digfusionsupport</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[newsButtons[news1Button]],
						[newsButtons[news2Button], newsButtons[news3Button]],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–û–±–Ω–æ–≤–∏—Ç—åüîÑÔ∏è", callback_data: "news" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function allNewsTextEdit(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "allNewsTextEdit";
		bot.editMessageText(
			`<b><i>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–æ–≤–æ—Å—Ç–∏ üìñ</i>\n\nüìñ –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n\n<code>${newsText[1]}</code>\n\n<b>–ù–∞–ø–∏—à–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ ‚úçÔ∏è</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
							{
								text: "–°–±—Ä–æ—Å–∏—Ç—å ‚ùå",
								callback_data: "allnewstextRESETmenu",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function allNewsTextEdit_2(chatId, text) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "menuHome";
		bot.editMessageText(
			`<b><i>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–æ–≤–æ—Å—Ç–∏ üìñ</i>\n\nüÜï –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n\n<i>"${text}"</i>\n\n<b>–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?üßê</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–°–±—Ä–æ—Å–∏—Ç—å ‚ùå",
								callback_data: "allnewstextRESETmenu",
							},
							{ text: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å‚úÖ", callback_data: "allnewsadd" },
						],
						[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "allnewsEDIT" }],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function AllNewsTextReset(chatId) {
	try {
		await bot.editMessageText(
			`*_‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–æ–≤–æ—Å—Ç–∏ üìñ_\n\nC–±—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–¥–µ–ª _"–ù–æ–≤–æ—Å—Ç–∏ üìñ"_ ‚ÅâÔ∏è*`,
			{
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
							{
								text: "–°–±—Ä–æ—Å–∏—Ç—å ‚úÖ",
								callback_data: "allnewstextRESETend",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function Settings(chatId) {
	const countRem = remindersData.filter(
		(obj) => obj.chatId == chatId && obj.isDone == false
	).length;
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	let countCalls = 0;
	if (dataAboutUser.callOnLesson) countCalls++;
	if (dataAboutUser.callOnBreak) countCalls++;
	if (dataAboutUser.callOnLessonIn5minutes) countCalls++;
	if (dataAboutUser.callOnLessonIn10minutes) countCalls++;
	if (dataAboutUser.callOnBreakIn5minutes) countCalls++;
	if (dataAboutUser.callOnBreakIn10minutes) countCalls++;

	try {
		await bot.editMessageText(
			`<b><i>üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Ä¢ <code>${chatId}</code> ‚öôÔ∏è</i>\n\n–î–∞–Ω–Ω—ã–µ:</b>\n–¢–≤–æ–π –ª–æ–≥–∏–Ω: <b>${
				dataAboutUser.login
			}</b> - <a href="https://t.me/${BotName}/?start=editfistname">–∏–∑–º–µ–Ω–∏—Ç—å</a>\n–†–æ–ª—å: <b>${
				dataAboutUser.userStatus
			}</b>\n–®–∫–æ–ª–∞: <b>${
				dataAboutUser.schoolName == "27c2"
					? "–ú–ë–û–£ –°–û–® ‚Ññ27–∫2"
					: `${
							dataAboutUser.schoolName == "27c1"
								? "–ú–ë–û–£ –°–û–® ‚Ññ27–∫1"
								: `${
										dataAboutUser.schoolName == "" ? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" : ""
								  }`
					  }`
			}</b>\n–ö–ª–∞—Å—Å: <b>${
				dataAboutUser.className
			}</b> - <a href="https://t.me/${BotName}/?start=editclass">${
				dataAboutUser.className == "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" ? "–≤—ã–±—Ä–∞—Ç—å" : "–∏–∑–º–µ–Ω–∏—Ç—å"
			}</a>\n\n<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n–ó–≤–æ–Ω–∫–∏: <b>${
				dataAboutUser.callOnLesson ||
				dataAboutUser.callOnBreak ||
				dataAboutUser.callOnLessonIn5minutes ||
				dataAboutUser.callOnLessonIn10minutes ||
				dataAboutUser.callOnBreakIn5minutes ||
				dataAboutUser.callOnBreakIn10minutes
					? `‚úÖ (${countCalls})`
					: "‚ùå"
			}</b> - <a href="https://t.me/${BotName}/?start=notificationsmenucalls">${
				dataAboutUser.callOnLesson ||
				dataAboutUser.callOnBreak ||
				dataAboutUser.callOnLessonIn5minutes ||
				dataAboutUser.callOnLessonIn10minutes ||
				dataAboutUser.callOnBreakIn5minutes ||
				dataAboutUser.callOnBreakIn10minutes
					? "–∏–∑–º–µ–Ω–∏—Ç—å"
					: "–≤–∫–ª—é—á–∏—Ç—å"
			}</a>\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–µ–±–µ: ${
				dataAboutUser.remindersForReturnIsActive ? "‚úÖ" : "‚ùå"
			} - ${
				dataAboutUser.remindersForReturnIsActive
					? `<a href="https://t.me/${BotName}/?start=remindersforreturntoggle">–≤—ã–∫–ª</a>`
					: `<a href="https://t.me/${BotName}/?start=remindersforreturntoggle">–≤–∫–ª</a>`
			}\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: <b>${
				countRem > 0 ? "‚úÖüîî" : "‚ùå"
			}</b>\n–°–æ–∑–¥–∞–Ω–æ: <b>${countRem}</b> - ${
				countRem > 0
					? `<a href="https://t.me/${BotName}/?start=remindersList">—Å–ø–∏—Å–æ–∫</a>`
					: `<a href="https://t.me/${BotName}/?start=remindersAdd">—Å–æ–∑–¥–∞—Ç—å</a>`
			}<b>\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∏–≥—Ä–∞—Ö:</b>\n–£–≥–∞–¥–∞–π-–∫–∞: <b>${
				dataAboutUser.game1NiceResults + dataAboutUser.game1BadResults >
					0 &&
				Math.round(
					(dataAboutUser.game1NiceResults /
						(dataAboutUser.game1NiceResults +
							dataAboutUser.game1BadResults)) *
						10000
				) / 100
					? `${
							Math.round(
								(dataAboutUser.game1NiceResults /
									(dataAboutUser.game1NiceResults +
										dataAboutUser.game1BadResults)) *
									10000
							) / 100
					  }% ‚úÖ, –∏–∑ ${
							dataAboutUser.game1NiceResults +
							dataAboutUser.game1BadResults
					  }`
					: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
			}</b>\n–¶—É–µ-—Ñ–∞: <b>${
				dataAboutUser.game2NiceResults +
					dataAboutUser.game2BadResults +
					dataAboutUser.game2DrawResults >
					0 &&
				Math.round(
					(dataAboutUser.game2NiceResults /
						(dataAboutUser.game2NiceResults +
							dataAboutUser.game2BadResults +
							dataAboutUser.game2DrawResults)) *
						10000
				) / 100
					? `${
							Math.round(
								(dataAboutUser.game2NiceResults /
									(dataAboutUser.game2NiceResults +
										dataAboutUser.game2BadResults +
										dataAboutUser.game2DrawResults)) *
									10000
							) / 100
					  }% <a href="https://t.me/${BotName}/?start=minidetail7">‚úÖ</a>, –∏–∑ ${
							dataAboutUser.game2NiceResults +
							dataAboutUser.game2BadResults +
							dataAboutUser.game2DrawResults
					  }`
					: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
			}</b>\n–ö—Ä-–Ω–æ–ª–∏–∫–∏: <b>${
				dataAboutUser.game3NiceResults +
					dataAboutUser.game3BadResults +
					dataAboutUser.game3DrawResults >
					0 &&
				Math.round(
					(dataAboutUser.game3NiceResults /
						(dataAboutUser.game3NiceResults +
							dataAboutUser.game3BadResults +
							dataAboutUser.game3DrawResults)) *
						10000
				) / 100
					? `${
							Math.round(
								(dataAboutUser.game3NiceResults /
									(dataAboutUser.game3NiceResults +
										dataAboutUser.game3BadResults +
										dataAboutUser.game3DrawResults)) *
									10000
							) / 100
					  }% ‚úÖ, –∏–∑ ${
							dataAboutUser.game3NiceResults +
							dataAboutUser.game3BadResults +
							dataAboutUser.game3DrawResults
					  }`
					: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
			}</b>\n–ü–∞—Å—Ö–∞–ª–∫–∏: <b>${
				dataAboutUser.miniDetail666 +
				dataAboutUser.miniDetail0 +
				dataAboutUser.miniDetail1 +
				dataAboutUser.miniDetail2 +
				dataAboutUser.miniDetail3 +
				dataAboutUser.miniDetail4 +
				dataAboutUser.miniDetail5 +
				dataAboutUser.miniDetail6 +
				dataAboutUser.miniDetail7 +
				dataAboutUser.miniDetail8 +
				dataAboutUser.miniDetail9
			} / ${maxCountMiniDetails} ${
				dataAboutUser.miniDetail666 +
					dataAboutUser.miniDetail0 +
					dataAboutUser.miniDetail1 +
					dataAboutUser.miniDetail2 +
					dataAboutUser.miniDetail3 +
					dataAboutUser.miniDetail4 +
					dataAboutUser.miniDetail5 +
					dataAboutUser.miniDetail6 +
					dataAboutUser.miniDetail7 +
					dataAboutUser.miniDetail8 +
					dataAboutUser.miniDetail9 >=
				maxCountMiniDetails
					? "‚úÖ"
					: ""
			}</b> - <a href= "https://t.me/${BotName}/?start=detailsRules">–∫–∞–∫ —ç—Ç–æ?</a>\n\n<b><a href= "https://t.me/${BotName}/?start=rules2">–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º</a></b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠",
								url: "https://t.me/digfusionsupport",
							},
						],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{
								text: "–ü—Ä–æ—á–∏–µ‚û°Ô∏è",
								callback_data: "settingsother",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function Settings_2(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		await bot.editMessageText(
			`<b><i>üõ†Ô∏è –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è</i>\n\n‚ùó–†–∞–∑–¥–µ–ª –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏‚ùó\n\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n</b>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: <b>${
				dataAboutUser.game1NiceResults +
				dataAboutUser.game1BadResults +
				dataAboutUser.game2NiceResults +
				dataAboutUser.game2BadResults +
				dataAboutUser.game2DrawResults +
				dataAboutUser.game3NiceResults +
				dataAboutUser.game3BadResults +
				dataAboutUser.game3DrawResults
			}\n</b>–î–µ–π—Å—Ç–≤–∏–π –≤—Å–µ–≥–æ: <b>${
				dataAboutUser.countOfActions
			}\n</b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <b>${
				dataAboutUser.dateOfRegistration
			}\n\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π:\n<code>https://t.me/${BotName}/?start=</code></b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ ‚ôªÔ∏è", callback_data: "start" },
							{ text: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üîÑÔ∏è", callback_data: "restart1" },
						],
						[
							{
								text: "‚ùå –£–¥–∞–ª–∏—Ç—å –ê–∫–∫–∞—É–Ω—Ç‚ùó",
								callback_data: "deleteaccount",
							},
						],
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "settings" },
							{
								text: "digfusion‚ùî",
								callback_data: "moreAboutUs",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function moreAboutUs(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		await bot.editMessageText(
			`<b><i>‚ùîdigfusion ‚Ä¢ –û –Ω–∞—Å üíÅüèª‚Äç‚ôÇÔ∏è</i></b>\n\n–ö–æ–º–ø–∞–Ω–∏—è <b><i>digfusion</i></b> - <b>–Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å—Ç–∞—Ä—Ç–∞–ø,</b> —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π <b>—Å–≤–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b> –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —É—Å–ª—É–≥–∏ –ø–æ <b>—Å–æ–∑–¥–∞–Ω–∏—é —á–∞—Ç-–±–æ—Ç–æ–≤</b> —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤! ‚òëÔ∏è\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ <b>–Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã, –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</b> –∏ <b>–ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏</b> –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º <b>Telegram –∫–∞–Ω–∞–ª–µ</b> –∏ <b>–±–æ—Ç–µ-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ! ü§ó\n\n<a href="https://t.me/digfusion">digfusion | –∏–Ω—Ñ–æ</a> ‚Ä¢ <a href="https://t.me/digfusionbot">digfusion | —É—Å–ª—É–≥–∏</a></b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "settingsother" },
							{
								text: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üí≠",
								url: "https://t.me/digfusionsupport",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}

async function editFistName(chatId, after) {
	try {
		const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

		dataAboutUser.userAction = "editFistName";

		await bot.editMessageText(
			`<i><b>üõ†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ ‚öôÔ∏è\n\n</b>–õ–æ–≥–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üîí</i><b>\n\n${
				after ? "–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π:" : "–¢–µ–∫—É—â–∏–π:"
			}  <code>${dataAboutUser.login}</code>${
				after ? "" : "\n\n–ù–∞–ø–∏—à–∏ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –ª–æ–≥–∏–Ω ‚úçÔ∏è"
			}</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `${
									dataAboutUser.login ==
									dataAboutUser.telegramFirstName
										? "‚¨ÖÔ∏è–ù–∞–∑–∞–¥"
										: ""
								}`,
								callback_data: "settings",
							},
							{
								text: `${
									dataAboutUser.login !=
									dataAboutUser.telegramFirstName
										? "–°–±—Ä–æ—Å–∏—Ç—å‚ùå"
										: ""
								}`,
								callback_data: "resetfirstname",
							},
							{ text: "–ü—Ä–∏–Ω—è—Ç—å‚úÖ", callback_data: "settings" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function adminMenu(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "menuHome";

		await bot.editMessageText(
			`<b><i>üí†–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—èüí†</i>\n\n–ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω? ü§ñ</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "–†–µ–µ—Å—Ç—Ä üíæ", callback_data: "usersdatalist" },
							{
								text: "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ üìã",
								callback_data: "usersblacklist",
							},
						],
						[
							{
								text: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ ‚úèÔ∏è",
								callback_data: "adminMenuEdit",
							},
							{
								text: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ üì¢",
								callback_data: "adminMenuSendMessage",
							},
						],
						[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "exit" }],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function adminMenuSendMessage(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "adminMenuSendMessage";

		await bot.editMessageText(
			"<b><i>üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ üì¢ \n\n‚ùó–í–ù–ò–ú–ê–ù–ò–ï‚ùó</i>\n\n–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n\n<i>–ü—Ä–∏–º–µ—Ä:</i>\n</b><code>–í —à–∫–æ–ª–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ‚ùóüòâ</code><b>\n\n–ù–∞–ø–∏—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ ‚úçÔ∏è</b>",
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				reply_markup: {
					inline_keyboard: [
						[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" }],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function adminMenuSendMessage_2(chatId, recipient) {
	try {
		await bot.editMessageText(
			`<b><i>üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è üì¢</i>\n\n</b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ <b>—É—Å–ø–µ—à–Ω–æ</b> –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ! üòâ‚úÖ`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
							{
								text: "–°–æ–∑–¥–∞—Ç—å –µ—à–µ ‚ûï",
								callback_data: "adminMenuSendMessage",
							},
						],
					],
				},
			}
		);
		for (let i = 0; i < usersData.length; i++) {
			if (usersData[i].chatId != qu1z3xId) {
				bot.sendMessage(
					usersData[i].chatId,
					`<b><i>${paragrafs[numberArr]}</i>\n\n${textMessageForAllUsers}</b>`,
					{
						parse_mode: "html",
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "–£–¥–∞–ª–∏—Ç—å ‚ùå",
										callback_data: "deleteexcess",
									},
									{
										text: "–°–ø–∞—Å–∏–±–æ üëç",
										callback_data: "deleteexcess",
									},
								],
							],
						},
					}
				);
			}
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function adminMenuSendMessageSettings(chatId) {
	try {
		await bot.editMessageText(
			`<b><i>üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è üì¢\n\n</i></b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n\n<b><i>${paragrafs[numberArr]}</i>\n\n${textMessageForAllUsers}</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `${
									numberArr == 0
										? `‚Ä¢ ${paragrafs[0]} ‚Ä¢`
										: `${paragrafs[0]}`
								}`,
								callback_data: "p0",
							},
						],
						[
							{
								text: `${
									numberArr == 1
										? `‚Ä¢ ${paragrafs[1]} ‚Ä¢`
										: `${paragrafs[1]}`
								}`,
								callback_data: "p1",
							},
						],
						[
							{
								text: `${
									numberArr == 2
										? `‚Ä¢ ${paragrafs[2]} ‚Ä¢`
										: `${paragrafs[2]}`
								}`,
								callback_data: "p2",
							},
						],
						[
							{
								text: `${
									numberArr == 3
										? `‚Ä¢ ${paragrafs[3]} ‚Ä¢`
										: `${paragrafs[3]}`
								}`,
								callback_data: "p3",
							},
						],
						[
							{
								text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
								callback_data: "adminMenuSendMessage",
							},
							{
								text: "–°–æ–∑–¥–∞—Ç—å ‚úÖ",
								callback_data: "adminMenuSendMessage2",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function adminMenuEdit(chatId) {
	try {
		await bot.editMessageText(
			`<b><i>üìñ –ò–∑–º–µ–Ω–µ–Ω–∏–µ ‚úèÔ∏è</i>${
				buttonUpdateActive
					? ""
					: `\n\n<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</i>\n</b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö 1 –º–∏–Ω üïë<b>`
			}\n\n–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∫–∏ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏? ü§ñ</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚úèÔ∏è`,
								url: "https://docs.google.com/spreadsheets/d/18xSi-VnqkjKbY9se4Q4bYeVPZAVqfHZd97nkVtYTiwY/edit#gid=0",
							},
							{
								text: `${
									buttonUpdateActive ? "–û–±–Ω–æ–≤–∏—Ç—å ‚úÖ" : "–ß–µ—Ä–µ–∑ 5–º üïë"
								}`,
								callback_data: `${
									buttonUpdateActive ? "updateraspisaniesheets" : "-"
								}`,
							},
						],
						[
							{
								text: `–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ‚úèÔ∏è`,
								url: "https://console.firebase.google.com/u/0/project/digschraspisanie/database/digschraspisanie-default-rtdb/data",
							},
							{
								text: `${
									buttonUpdateActive ? "–û–±–Ω–æ–≤–∏—Ç—å ‚úÖ" : "–ß–µ—Ä–µ–∑ 5–º üïë"
								}`,
								callback_data: `${
									buttonUpdateActive ? "readnewdatabase" : "-"
								}`,
							},
						],
						[
							{
								text: `‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å "–ù–æ–≤–æ—Å—Ç–∏üìñ"`,
								callback_data: "allnewsEDIT",
							},
						],
						[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" }],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function registryUsersData(chatId, listNum) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "registryUsersData";

		// —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –±–æ—Ç–µ
		usersData.sort((a, b) => b.countOfActions - a.countOfActions);

		let text = "";
		if (listNum == 1) {
			for (let i = 0; i < usersData.length; i++) {
				let countCalls = 0;
				if (usersData[i].callOnLesson) countCalls++;
				if (usersData[i].callOnBreak) countCalls++;
				if (usersData[i].callOnLessonIn5minutes) countCalls++;
				if (usersData[i].callOnLessonIn10minutes) countCalls++;
				if (usersData[i].callOnBreakIn5minutes) countCalls++;
				if (usersData[i].callOnBreakIn10minutes) countCalls++;

				text += `[${i + 1}]  ${
					usersData[i].inBlackList
						? `<a href="https://t.me/${BotName}/?start=deletefromblacklistuser${usersData[i].chatId}">‚ùå</a>`
						: ``
				} @${usersData[i].username}${
					usersData[i].chatId != qu1z3xId && !usersData[i].inBlackList
						? `${
								!usersData[i].inBlackList
									? `<a href="https://t.me/${BotName}/?start=addtoblacklistuser${usersData[i].chatId}"> - –∑–∞–±–∞–Ω–∏—Ç—å ‚ùå</a>`
									: ``
						  }`
						: ""
				}\n${usersData[i].inBlackList ? `<s>` : ``}‚Ä¢ login: ${
					usersData[i].login != usersData[i].telegramFirstName
						? `${usersData[i].login} (${usersData[i].telegramFirstName})`
						: `${usersData[i].login}`
				}\n‚Ä¢ chatId: <code>${usersData[i].chatId}</code>\n‚Ä¢ userStatus: ${
					usersData[i].userStatus
				}\n‚Ä¢ className: "${usersData[i].className}"\n‚Ä¢ gamesPlayed: ${
					usersData[i].game1BadResults +
					usersData[i].game1NiceResults +
					usersData[i].game2BadResults +
					usersData[i].game2NiceResults +
					usersData[i].game2DrawResults +
					usersData[i].game3BadResults +
					usersData[i].game3NiceResults +
					usersData[i].game3DrawResults
				}\n‚Ä¢ totalActions: ${
					usersData[i].countOfActions
				} \n‚Ä¢ callsReminders: ${countCalls}\n‚Ä¢ detailsFound: ${
					usersData[i].miniDetail666 +
					usersData[i].miniDetail0 +
					usersData[i].miniDetail1 +
					usersData[i].miniDetail2 +
					usersData[i].miniDetail3 +
					usersData[i].miniDetail4 +
					usersData[i].miniDetail5 +
					usersData[i].miniDetail6 +
					usersData[i].miniDetail7 +
					usersData[i].miniDetail8 +
					usersData[i].miniDetail9
				} / ${maxCountMiniDetails}\n‚Ä¢ registration: ${
					usersData[i].dateOfRegistration
				}${usersData[i].inBlackList ? `</s>` : ``}\n\n`;
			}

			bot.editMessageText(
				`<b><i>üíæ –†–µ–µ—Å—Ç—Ä  ‚Ä¢  <a href="https://console.firebase.google.com/u/0/project/digschraspisanie/database/digschraspisanie-default-rtdb/data">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</a> üìÅ\n\n–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:\n\n${text}</i></b>–í—Å–µ–≥–æ: <b>${usersData.length}</b>`,
				{
					parse_mode: "HTML",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
								{ text: "–û–±–Ω–æ–≤–∏—Ç—åüîÑÔ∏è", callback_data: "usersdatalist" },
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function usersBlacklist(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "usersBlacklist";
		let blacklistText = "";
		const blacklist = usersData.filter((obj) => obj.inBlackList == true);
		if (blacklist.length > 0) {
			blacklist.forEach((obj) => {
				blacklistText += `<b><a href="https://t.me/${BotName}/?start=deletefromblacklistuser${
					obj.chatId
				}">‚ùå</a>  ${
					obj.username != null ? `@${obj.username}` : `${obj.login}`
				} - <i>${obj.chatId}</i></b>\n\n`;
			});
		} else if (blacklist.length == 0) {
			blacklistText = "</b>–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ <b>–ø—É—Å—Ç üèùÔ∏è\n\n";
		}

		bot.editMessageText(
			`<b><i>ü§¨ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ üìã</i>\n\n${blacklistText}${
				blacklist.length != 0
					? `–í—Å–µ–≥–æ: ${blacklist.length} ${
							blacklist.length == 1
								? `–Ω–µ—É–¥–∞—á–Ω–∏–∫`
								: `${
										blacklist.length >= 2 && blacklist.length <= 4
											? `–Ω–µ—É–¥–∞—á–Ω–∏–∫–∞`
											: `${
													blacklist.length >= 5 &&
													blacklist.length <= 20
														? `–Ω–µ—É–¥–∞—á–Ω–∏–∫–æ–≤`
														: ``
											  }`
								  }`
					  }`
					: ""
			}</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
							{ text: "–î–æ–±–∞–≤–∏—Ç—å‚úÖ", callback_data: "addinblacklist" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function addInBlacklist(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		dataAboutUser.userAction = "addInBlacklist";

		bot.editMessageText(
			`<b><i>ü§¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ üìã</i></b>\n\n–ù—É–∂–µ–Ω <b>—Ç–æ–ª—å–∫–æ Id</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üôè`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "usersblacklist" }],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function addInBlacklist_2(chatId, chatIdForBlacklist) {
	const dataAboutUser = usersData.find(
		(obj) => obj.chatId == chatIdForBlacklist
	);

	try {
		let countCalls = 0;
		if (dataAboutUser.callOnLesson) countCalls++;
		if (dataAboutUser.callOnBreak) countCalls++;
		if (dataAboutUser.callOnLessonIn5minutes) countCalls++;
		if (dataAboutUser.callOnLessonIn10minutes) countCalls++;
		if (dataAboutUser.callOnBreakIn5minutes) countCalls++;
		if (dataAboutUser.callOnBreakIn10minutes) countCalls++;

		bot.editMessageText(
			`<b><i>ü§¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ üìã\n\n–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n@${
				dataAboutUser.username
			}\n‚Ä¢ login: ${dataAboutUser.login}\n‚Ä¢ chatId: <code>${
				dataAboutUser.chatId
			}</code>\n‚Ä¢ userStatus: ${dataAboutUser.userStatus}\n‚Ä¢ className: "${
				dataAboutUser.className
			}"\n‚Ä¢ gamesPlayed: ${
				dataAboutUser.game1BadResults +
				dataAboutUser.game1NiceResults +
				dataAboutUser.game2BadResults +
				dataAboutUser.game2NiceResults +
				dataAboutUser.game2DrawResults +
				dataAboutUser.game3BadResults +
				dataAboutUser.game3NiceResults +
				dataAboutUser.game3DrawResults
			}\n‚Ä¢ totalActions: ${
				dataAboutUser.countOfActions
			} \n‚Ä¢ callsReminders: ${countCalls}\n‚Ä¢ detailsFound: ${
				dataAboutUser.miniDetail666 +
				dataAboutUser.miniDetail0 +
				dataAboutUser.miniDetail1 +
				dataAboutUser.miniDetail2 +
				dataAboutUser.miniDetail3 +
				dataAboutUser.miniDetail4 +
				dataAboutUser.miniDetail5 +
				dataAboutUser.miniDetail6 +
				dataAboutUser.miniDetail7 +
				dataAboutUser.miniDetail8 +
				dataAboutUser.miniDetail9
			} / ${maxCountMiniDetails}\n‚Ä¢ registration: ${
				dataAboutUser.dateOfRegistration
			}\n\n</i></b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "usersblacklist" },
							{ text: "–ö–∏–Ω—É—Ç—å ‚ùå", callback_data: "addinblacklistend" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function addInBlacklistEnd(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		bot.editMessageText(
			`<b><i>ü§¨ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ üìã</i></b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>—É—Å–ø–µ—à–Ω–æ</b> —Å—Ç–∞–ª –Ω–µ—É–¥–∞—á–Ω–∏–∫–æ–º! üòâ‚úÖ`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "exit" },
							{ text: "–°–ø–∏—Å–æ–∫ üìã", callback_data: "usersblacklist" },
						],
					],
				},
			}
		);
		usersData[
			usersData.findIndex((obj) => obj.chatId == chatIdForBlacklist)
		].inBlackList = true;
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function Reminders(chatId) {
	const countRem = remindersData.filter((obj) => obj.chatId == chatId).length;

	try {
		bot.editMessageText(
			"*_üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üóìÔ∏è_\n\n–Ø –º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å\\:\n‚Ä¢ –ö–æ–≥–¥–∞ —Å–¥–∞—Ç—å –¥–æ–∫–ª–∞\\.\\.\\.\n‚Ä¢ –î–∞ –≤—Å—ë —á—Ç–æ —É–≥–æ–¥–Ω–æ\\!ü§Ø\n\\- –∏ —è –Ω–µ –∑–∞–±—É–¥—É, —Ç–æ —á—Ç–æ —Ç—ã –º–Ω–µ –ø–æ—Ä—É—á–∏—à—å –Ω–∞–ø–æ–º–Ω–∏—Ç—å\\!üòâ\n\n–ù–µ –∑–∞—Å–æ—Ä—è–π —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–∏—à–∏ –º–Ω–µü§ó*",
			{
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `–¢–µ–∫—É—â–∏–µ ${countRem} üìÉ`,
								callback_data: "reminderslist",
							},
							{ text: "–°–æ–∑–¥–∞—Ç—åüìù", callback_data: "remindersadd" },
						],
						[{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" }],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function RemindersList(chatId) {
	try {
		let reminderText = "";
		const userReminders = remindersData.filter((obj) => obj.chatId == chatId);
		if (userReminders.length > 0) {
			let i = 1;
			userReminders.forEach((obj) => {
				reminderText += `<b><a href="https://t.me/${BotName}/?start=deleterem${i}">‚ùå</a>${
					userReminders[i - 1].isDone
						? ""
						: `<a href="https://t.me/${BotName}/?start=crossoutrem${i}">‚úÖ</a>`
				}  ${i}.</b> ${
					userReminders[i - 1].isDone
						? `<s>${obj.text} - <b>${obj.time}</b></s>`
						: `${obj.text} - <b>${obj.time}</b>`
				}\n\n`;
				i++;
			});
		} else if (userReminders.length == 0) {
			reminderText = "–£ —Ç–µ–±—è <b>–Ω–µ—Ç</b> –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üòâ\n\n";
		}

		bot.editMessageText(
			`<b><i>üîî –¢–µ–∫—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üóìÔ∏è</i>\n\n–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b><i>\n\n${reminderText}</i><b>${
				userReminders.length != 0 ? `–í—Å–µ–≥–æ: ${userReminders.length}` : ""
			}</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `${
									userReminders.length > 1 ? "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ ‚ùå" : ""
								}`,
								callback_data: "deleteallreminder",
							},
						],
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "reminders" },
							{ text: "–°–æ–∑–¥–∞—Ç—åüìù", callback_data: "remindersadd" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function remindersAdd(chatId) {
	let hours = new Date().getHours(),
		minutes = new Date().getMinutes();

	minutes++;
	if (minutes >= 60) {
		hours += 1;
		minutes -= 60;
	}
	if (hours >= 24) hours -= 24;

	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
	try {
		dataAboutUser.userAction = "remindersAdd";
		bot.editMessageText(
			`<b><i>üîî –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üìù\n\n–ü—Ä–∏–º–µ—Ä:</i></b>\n<code>–°–µ—Å—Ç—å –∑–∞ —É—Ä–æ–∫–∏ –≤ <b>${String(
				hours
			).padStart(2, "0")}:${String(minutes).padStart(
				2,
				"0"
			)}</b></code>\n\n<i>–ò—Å–ø–æ–ª—å–∑—É–π <b>"–í"</b>‚ùó</i>\n\n<b>–ü–∏—à–∏ –ø—Ä—è–º–æ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º üòâ‚úçÔ∏è</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				reply_markup: {
					inline_keyboard: [
						[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "reminders" }],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function start(
	chatId,
	firstName,
	quickStart = false,
	afterAbsenceData = false
) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
	let rndNum = Math.floor(Math.random() * stickers.length);

	const dateNowHHNN = new Date().getHours() * 100 + new Date().getMinutes();
	if (dateNowHHNN < 1200 && dateNowHHNN >= 600) textToSayHello = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
	else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200)
		textToSayHello = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
	else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700)
		textToSayHello = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
	else if (dateNowHHNN >= 2200 || dateNowHHNN < 600)
		textToSayHello = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";

	try {
		if (afterAbsenceData) {
			await bot
				.sendMessage(
					chatId,
					`<b>–£—Ö.. –ò–∑–≤–∏–Ω–∏ –º–µ–Ω—è –≤–¥–≤–æ–π–Ω–µ! üôè\n\n</b><i>–Ø —Å—Ç–∞—Ä–∞–ª—Å—è, –Ω–æ –Ω–µ —Å–º–æ–≥ —É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è <b>—Å–≤–µ—Ä—Ö—É! ‚¨ÜÔ∏è</b></i><b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏ –∏ –∑–∞–±—É–¥—å –ø—Ä–æ –Ω–∏—Ö! üòâ</b>`,
					{
						parse_mode: "HTML",
						disable_web_page_preview: true,
					}
				)
				.then((message) => {
					dataAboutUser.messageIdForApologies = message.message_id;
				});
		}

		await bot.sendSticker(chatId, stickers[rndNum]).then((message) => {
			dataAboutUser.messageIdSayHi0 = message.message_id;
		});
		await bot
			.sendMessage(
				chatId,
				`*${textToSayHello}, ${firstName}\\! [‚úåÔ∏è](https://t.me/${BotName}/?start=minidetail1)*`,
				{
					parse_mode: "MarkdownV2",
					disable_web_page_preview: true,
				}
			)
			.then((message) => {
				dataAboutUser.messageIdSayHi1 = message.message_id;
			});

		await bot
			.sendMessage(
				chatId,
				`<b><a href = "https://t.me/${BotName}/?start=showhi2">–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç?</a></b>`,
				{
					parse_mode: "html",
					disable_web_page_preview: true,
				}
			)
			.then((message) => {
				dataAboutUser.messageIdSayHi2 = message.message_id;
			});

		await bot.sendMessage(chatId, `„Ö§`, {}).then((message) => {
			dataAboutUser.messageId = message.message_id;
		});
		if (quickStart) {
			menuHome(chatId);
		} else if (!quickStart) {
			ChoosingClass(chatId, 2);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function deleteAllMessages(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		bot.deleteMessage(chatId, dataAboutUser.messageIdSayHi0);
		bot.deleteMessage(chatId, dataAboutUser.messageIdSayHi1);
		bot.deleteMessage(chatId, dataAboutUser.messageIdSayHi2);
		bot.deleteMessage(chatId, dataAboutUser.messageId);
	} catch (error) {
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function miniDetails(chatId, numberOfDetail) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		let foundDetailsDoneText = [
			"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–ï—â–µ –æ–¥–Ω–∞ –ø–∞—Å—Ö–∞–ª–∫–∞ –≤ –∫–∞—Ä–º–∞–Ω–µ! üòÜ",
			"–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n–ò –µ—â–µ –æ–¥–Ω—É! ü•≥",
			"–ù–∞—à–ª–∞—Å—å –µ—â—ë –æ–¥–Ω–∞! üòÄ",
			"–ï—â—ë –ø–ª—é—Å –æ–¥–Ω–∞ –≤ –∫–æ–ø–∏–ª–∫—É! üëç",
		];
		rndNum = Math.floor(Math.random() * foundDetailsDoneText.length);

		let detailIsHonest = false;

		if (numberOfDetail == 666) {
			dataAboutUser.miniDetail666 = 1;
			detailIsHonest = true;
		} else if (numberOfDetail == 0 && dataAboutUser.miniDetail0 != 1) {
			dataAboutUser.miniDetail0 = 1;
			detailIsHonest = true;
		} else if (numberOfDetail == 1 && dataAboutUser.miniDetail1 != 1) {
			dataAboutUser.miniDetail1 = 1;
			detailIsHonest = true;
		} else if (numberOfDetail == 2 && dataAboutUser.miniDetail2 != 1) {
			dataAboutUser.miniDetail2 = 1;
			detailIsHonest = true;
		} else if (numberOfDetail == 3 && dataAboutUser.miniDetail3 != 1) {
			dataAboutUser.miniDetail3 = 1;
			detailIsHonest = true;
		} else if (numberOfDetail == 4 && dataAboutUser.miniDetail4 != 1) {
			dataAboutUser.miniDetail4 = 1;
			detailIsHonest = true;
		} else if (numberOfDetail == 5 && dataAboutUser.miniDetail5 != 1) {
			dataAboutUser.miniDetail5 = 1;
			detailIsHonest = true;
		} else if (numberOfDetail == 6 && dataAboutUser.miniDetail6 != 1) {
			dataAboutUser.miniDetail6 = 1;
			detailIsHonest = true;
		} else if (numberOfDetail == 7 && dataAboutUser.miniDetail7 != 1) {
			dataAboutUser.miniDetail7 = 1;
			detailIsHonest = true;
		} else if (numberOfDetail == 8 && dataAboutUser.miniDetail8 != 1) {
			dataAboutUser.miniDetail8 = 1;
			detailIsHonest = true;
		} else if (numberOfDetail == 9 && dataAboutUser.miniDetail9 != 1) {
			dataAboutUser.miniDetail9 = 1;
			detailIsHonest = true;
		} else {
			await bot.editMessageText(
				`${
					dataAboutUser.miniDetail666 +
						dataAboutUser.miniDetail0 +
						dataAboutUser.miniDetail1 +
						dataAboutUser.miniDetail2 +
						dataAboutUser.miniDetail3 +
						dataAboutUser.miniDetail4 +
						dataAboutUser.miniDetail5 +
						dataAboutUser.miniDetail6 +
						dataAboutUser.miniDetail7 +
						dataAboutUser.miniDetail8 +
						dataAboutUser.miniDetail9 ==
					maxCountMiniDetails
						? `<b>–î–∞ –ª–∞–¥–Ω–æ —Ç–µ–±–µ!üòÜ\n\n–ù–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É –∏ —Ç–∞–∫ ${maxCountMiniDetails} / ${maxCountMiniDetails}!\n\n–¢–æ–ª—å–∫–æ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –Ω–∏–∫–æ–º—É –æ —Ç–∞–π–Ω–∏–∫–∞—Ö!üôè</b>`
						: `<b>–¢–≤–æ–∏ —Å–ª–µ–¥—ã - —Ç–µ–±—è –≤—ã–¥–∞—é—Ç..\n\n–ü–æ –≤—Ç–æ—Ä–æ–º—É –∫—Ä—É–≥—É –Ω–µ—á–µ—Å—Ç–Ω–æ! üò†</b>
			\n–ü–æ–∫–∞ —á—Ç–æ <b>${
				dataAboutUser.miniDetail666 +
				dataAboutUser.miniDetail0 +
				dataAboutUser.miniDetail1 +
				dataAboutUser.miniDetail2 +
				dataAboutUser.miniDetail3 +
				dataAboutUser.miniDetail4 +
				dataAboutUser.miniDetail5 +
				dataAboutUser.miniDetail6 +
				dataAboutUser.miniDetail7 +
				dataAboutUser.miniDetail8 +
				dataAboutUser.miniDetail9
			} –∏–∑ ${maxCountMiniDetails}!</b>`
				}`,
				{
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					parse_mode: "html",
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
									callback_data: "exit",
								},
							],
						],
					},
				}
			);
		}
		if (detailIsHonest) {
			await bot.editMessageText(
				`${
					dataAboutUser.miniDetail666 +
						dataAboutUser.miniDetail0 +
						dataAboutUser.miniDetail1 +
						dataAboutUser.miniDetail2 +
						dataAboutUser.miniDetail3 +
						dataAboutUser.miniDetail4 +
						dataAboutUser.miniDetail5 +
						dataAboutUser.miniDetail6 +
						dataAboutUser.miniDetail7 +
						dataAboutUser.miniDetail8 +
						dataAboutUser.miniDetail9 <=
					1
						? `<b>–°—Ç–æ–ø —á—Ç–æ‚ÅâÔ∏è\n–≠—Ç–æ –ø–æ—Ö–æ–∂–µ <i>—Å–ø—Ä—è—Ç–∞–Ω–Ω–∞—è</i> –ø–∞—Å—Ö–∞–ª–∫–∞!\n\n–ì–æ–≤–æ—Ä—è—Ç, –æ–Ω–∏ —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –ø–æ <i>–≤—Å–µ–º—É</i> –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –±–æ—Ç–∞! ü§î\n\nC–æ–±—Ä–∞–Ω–æ ${
								dataAboutUser.miniDetail666 +
								dataAboutUser.miniDetail0 +
								dataAboutUser.miniDetail1 +
								dataAboutUser.miniDetail2 +
								dataAboutUser.miniDetail3 +
								dataAboutUser.miniDetail4 +
								dataAboutUser.miniDetail5 +
								dataAboutUser.miniDetail6 +
								dataAboutUser.miniDetail7 +
								dataAboutUser.miniDetail8 +
								dataAboutUser.miniDetail9
						  } –∏–∑ ${maxCountMiniDetails}!</b>`
						: `${
								dataAboutUser.miniDetail666 +
									dataAboutUser.miniDetail0 +
									dataAboutUser.miniDetail1 +
									dataAboutUser.miniDetail2 +
									dataAboutUser.miniDetail3 +
									dataAboutUser.miniDetail4 +
									dataAboutUser.miniDetail5 +
									dataAboutUser.miniDetail6 +
									dataAboutUser.miniDetail7 +
									dataAboutUser.miniDetail8 +
									dataAboutUser.miniDetail9 ==
								maxCountMiniDetails
									? `<b>–ü–æ—Å—Ç–æ–π! –≠—Ç–æ —Ä–∞–∑–≤–µ —Ç—ã —Å–æ–±—Ä–∞–ª..\n\n–í–°–ï</b> –ø–∞—Å—Ö–∞–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è <b>—Ç–∞–∫ –¥–æ–ª–≥–æ</b> –ø—Ä—è—Ç–∞–ª‚ÅâÔ∏èü§Ø\n\n–ù–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É <b>${maxCountMiniDetails} / ${maxCountMiniDetails}! ‚úÖ</b>`
									: `<b>${
											foundDetailsDoneText[rndNum]
									  }</b>\n\nC–æ–±—Ä–∞–Ω–æ <b>${
											dataAboutUser.miniDetail666 +
											dataAboutUser.miniDetail0 +
											dataAboutUser.miniDetail1 +
											dataAboutUser.miniDetail2 +
											dataAboutUser.miniDetail3 +
											dataAboutUser.miniDetail4 +
											dataAboutUser.miniDetail5 +
											dataAboutUser.miniDetail6 +
											dataAboutUser.miniDetail7 +
											dataAboutUser.miniDetail8 +
											dataAboutUser.miniDetail9
									  } –∏–∑ ${maxCountMiniDetails}!</b>`
						  }`
				}`,
				{
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					parse_mode: "html",
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
									callback_data: "exit",
								},
								{
									text: "–ß—Ç–æ –∏ –∫–∞–∫‚ùì",
									callback_data: "detailsrules",
								},
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

async function detailsRules(chatId) {
	bot.editMessageText(
		`*–°—É—Ç—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ \\- –∑–∞–ø—Ä—è—Ç–∞–Ω–Ω—ã—Ö –≤ ||—Å–º–∞–π–ª–∏–∫–∏|| –ø–∞—Å—Ö–∞–ª–æ—á–µ–∫\\! ü•ö\n\n_–í–æ—Ç –æ–¥–Ω–∞ –∏–∑ –Ω–∏—Ö:_*\n–ù–∞–∂–º–∏ –Ω–∞ *—É–ª—ã–±–∞—é—â–∏–π—Å—è* —Å—Ç–∏–∫–µ—Ä \\- [üòÜ](https://t.me/${BotName}/?start=minidetail666)`,
		{
			parse_mode: "MarkdownV2",
			chat_id: chatId,
			message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
			disable_web_page_preview: true,
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
							callback_data: "miniDetails",
						},
					],
				],
			},
		}
	);
}

async function StartAll() {
	try {
		if (TOKEN == config.TOKENs[0]) {
			BotName = "digtestingbot";
			// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ü–†–û–¢–û–¢–ò–ü
		} else if (TOKEN == config.TOKENs[1]) {
			BotName = "digschbot";

			updateSheetsData();
		}

		cron.schedule(`*/1 * * * *`, function () {
			buttonUpdateActive = true;
		});

		cron.schedule(`1 * * * * *`, function () {
			let textToCallReminder = "";

			const dateNowHHNN =
				new Date().getHours() * 100 + new Date().getMinutes();
			try {
				if (dateNowHHNN < 1200 && dateNowHHNN >= 600)
					textToSayHello = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
				else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200)
					textToSayHello = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
				else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700)
					textToSayHello = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
				else if (dateNowHHNN >= 2200 || dateNowHHNN < 600)
					textToSayHello = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";

				for (let i = 0; i < usersData.length; i++) {
					if (
						usersData[i].messageIdSayHi1 &&
						usersData[i].messageIdSayHi1 != ""
					) {
						bot.editMessageText(
							`*${textToSayHello}, ${usersData[i].login}\\! [‚úåÔ∏è](https://t.me/${BotName}/?start=minidetail1)*`,
							{
								parse_mode: "MarkdownV2",
								chat_id: usersData[i].chatId,
								message_id: usersData[i].messageIdSayHi1,
								disable_web_page_preview: true,
							}
						);
					}
				}

				const timeSimple = `${String(new Date().getHours()).padStart(
					2,
					"0"
				)}:${String(new Date().getMinutes()).padStart(2, "0")}`;
				const time5Minutes = `${String(new Date().getHours()).padStart(
					2,
					"0"
				)}:${String(new Date().getMinutes() + 5).padStart(2, "0")}`;
				const time10Minutes = `${String(new Date().getHours()).padStart(
					2,
					"0"
				)}:${String(new Date().getMinutes() + 10).padStart(2, "0")}`;

				const dateNowHNNText = `${String(new Date().getHours())}:${String(
					new Date().getMinutes()
				).padStart(2, "0")}`;
				const dateNowHHNNText = `${String(new Date().getHours()).padStart(
					2,
					"0"
				)}:${String(new Date().getMinutes()).padStart(2, "0")}`;

				//! CALLS NOTIFICATION

				const dayW = new Date().getDay();

				for (let j = 0; j < usersData.length; j++) {
					const classArr =
						usersData[j].className == "10–ì"
							? class10g
							: usersData[j].className == "10–ë"
							? class10b
							: usersData[j].className == "10–ê"
							? class10a
							: usersData[j].className == "11–î"
							? class11d
							: usersData[j].className == "11–ì"
							? class11g
							: usersData[j].className == "11–í"
							? class11v
							: usersData[j].className == "11–ê"
							? class11a
							: [];
					if (
						(usersData[j].callOnLessonIn5minutes ||
							usersData[j].callOnLessonIn10minutes ||
							usersData[j].callOnBreakIn5minutes ||
							usersData[j].callOnBreakIn10minutes) &&
						classArr[dayW]
					) {
						for (let i = 0; i < timesOnLesson.length; i++) {
							if (
								((timeSimple == timesOnLesson[i] &&
									usersData[j].callOnLesson) ||
									(timeSimple == timesOnBreak[i] &&
										usersData[j].callOnBreak) ||
									(time5Minutes == timesOnLesson[i] &&
										usersData[j].callOnLessonIn5minutes) ||
									(time5Minutes == timesOnBreak[i] &&
										usersData[j].callOnBreakIn5minutes) ||
									(time10Minutes == timesOnLesson[i] &&
										usersData[j].callOnLessonIn10minutes) ||
									(time10Minutes == timesOnBreak[i] &&
										usersData[j].callOnBreakIn10minutes)) &&
								classArr[day][i] &&
								classArr[day][i] != ""
							) {
								textToCallReminder = "";

								if (
									timeSimple == timesOnLesson[i] &&
									usersData[j].callOnLesson
								)
									textToCallReminder =
										"–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ! üëÜ\n–£ —Ç–µ–±—è –Ω–∞—á–∞–ª—Å—è —É—Ä–æ–∫! üòâ";
								if (
									timeSimple == timesOnBreak[i] &&
									usersData[j].callOnBreak
								)
									textToCallReminder = `–ú–æ–∂–Ω–æ –≤—ã–¥–æ—Ö–Ω—É—Ç—å! üòÄ\n–£ —Ç–µ–±—è –Ω–∞—á–∞–ª–∞—Å—å ${
										timeSimple == "11:05" || timeSimple == "10:05"
											? "–ë–û–õ–¨–®–ê–Ø"
											: "–º–∞–ª–µ–Ω—å–∫–∞—è"
									} –ø–µ—Ä–µ–º–µ–Ω–∞! üòâ\n\n${
										timeSimple == "11:05"
											? "<i>–í—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞–∫–∞! üòã</i>"
											: `${
													timeSimple == "13:55"
														? "<i>–ù–∞ —ç—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–µ - –û–±–µ–¥! üòÄ</i>"
														: ""
											  }`
									}`;
								if (
									time5Minutes == timesOnLesson[i] &&
									usersData[j].callOnLessonIn5minutes
								)
									textToCallReminder =
										"–ì–æ—Ç–æ–≤—å—Å—è –∫ —É—Ä–æ–∫—É! üßë‚Äçüè´\n–ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç —É —Ç–µ–±—è —É—Ä–æ–∫! üòâ";
								if (
									time5Minutes == timesOnBreak[i] &&
									usersData[j].callOnBreakIn5minutes
								)
									textToCallReminder = `–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –æ—Ç–¥—ã—Ö! üòé\n–†–æ–≤–Ω–æ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç ${
										time5Minutes == "11:05" || time5Minutes == "10:05"
											? "–ë–û–õ–¨–®–ê–Ø"
											: "–º–∞–ª–µ–Ω—å–∫–∞—è"
									} –ø–µ—Ä–µ–º–µ–Ω–∞! üòâ`;
								if (
									time10Minutes == timesOnLesson[i] &&
									usersData[j].callOnLessonIn10minutes
								)
									textToCallReminder =
										"–ë—É–¥—å –≥–æ—Ç–æ–≤—ã–º! üìö\n–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç —É —Ç–µ–±—è —É—Ä–æ–∫! üòâ";
								if (
									time10Minutes == timesOnBreak[i] &&
									usersData[j].callOnBreakIn10minutes
								)
									textToCallReminder = `–°–∫–æ—Ä–æ –æ—Ç–¥—ã—Ö! ‚ò∫Ô∏è\n–†–æ–≤–Ω–æ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç ${
										time10Minutes == "11:05" ||
										time10Minutes == "10:05"
											? "–ë–û–õ–¨–®–ê–Ø"
											: "–º–∞–ª–µ–Ω—å–∫–∞—è"
									} –ø–µ—Ä–µ–º–µ–Ω–∞! üòâ`;
								if (textToCallReminder != "") {
									bot.sendMessage(
										usersData[j].chatId,
										`<b>üîî ${textToCallReminder}</b>`,
										{
											parse_mode: "HTML",
											reply_markup: {
												inline_keyboard: [
													[
														{
															text: "–í—ã–∫–ª—é—á–∏—Ç—å üîï",
															callback_data:
																"notificationsMenuCallsAndDelete",
														},
														{
															text: "–°–ø–∞—Å–∏–±–æ üëç",
															callback_data: "deleteexcess",
														},
													],
												],
											},
										}
									);
								}
							}
						}
					}
				}

				//! REMINDERS NOTIFICATION

				if (remindersData.length > 0) {
					for (let i = 0; i < remindersData.length; i++) {
						if (
							(remindersData[i].time == dateNowHNNText ||
								remindersData[i].time == dateNowHHNNText) &&
							!remindersData[i].isDone
						) {
							bot.sendMessage(
								remindersData[i].chatId,
								`<b><a href="https://t.me/${BotName}/?start=minidetail9">üîî</a> –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚ùó\n<i>${remindersData[i].text}</i> –Ω–∞ ${remindersData[i].time}</b>`,
								{
									parse_mode: "html",
									disable_web_page_preview: true,
									reply_markup: {
										inline_keyboard: [
											[
												{
													text: "–£–¥–∞–ª–∏—Ç—å ‚ùå",
													callback_data: `deletereminder${remindersData[i].reminderId}`,
												},
												{
													text: "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ üîÑÔ∏è",
													callback_data: `updatetimeforreminder${remindersData[i].reminderId}`,
												},
											],
										],
									},
								}
							);
						}
					}
				}
			} catch (error) {
				console.log(error);
				sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
			}
		});

		// –∏–Ω–∏—Ü–∏–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞
		if (!diningRoomData.find((obj) => obj.botName == BotName)) {
			diningRoomData = [
				{
					botName: BotName,
					weekdayMenu: 1,
					countOfLikesOnFood: 0,
					countOfNeutralOnFood: 0,
					countOfDislikesOnFood: 0,
				},
				{
					botName: BotName,
					weekdayMenu: 2,
					countOfLikesOnFood: 0,
					countOfNeutralOnFood: 0,
					countOfDislikesOnFood: 0,
				},
				{
					botName: BotName,
					weekdayMenu: 3,
					countOfLikesOnFood: 0,
					countOfNeutralOnFood: 0,
					countOfDislikesOnFood: 0,
				},
				{
					botName: BotName,
					weekdayMenu: 4,
					countOfLikesOnFood: 0,
					countOfNeutralOnFood: 0,
					countOfDislikesOnFood: 0,
				},
				{
					botName: BotName,
					weekdayMenu: 5,
					countOfLikesOnFood: 0,
					countOfNeutralOnFood: 0,
					countOfDislikesOnFood: 0,
				},
			];
		}

		bot.onText(/(.+)/, async (message, match) => {
			const chatId = message.chat.id;
			const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
			try {
				const chatId = message.chat.id;
				if (
					chatId == qu1z3xId &&
					dataAboutUser &&
					dataAboutUser.userAction == "adminMenuSendMessage"
				) {
					textMessageForAllUsers = match[1];
					adminMenuSendMessageSettings(chatId);
				} else if (
					dataAboutUser.userAction == "editFistName" &&
					dataAboutUser &&
					match[1] != "/start editfistname" &&
					match[1] != message.from.first_name
				) {
					dataAboutUser.login = match[1];
					editFistName(chatId, dataAboutUser.telegramFirstName, true);
				} else if (
					dataAboutUser.userAction == "addInBlacklist" &&
					dataAboutUser &&
					match[1] != qu1z3xId
				) {
					if (usersData.find((obj) => obj.chatId == match[1])) {
						chatIdForBlacklist = match[1];
						addInBlacklist_2(chatId, chatIdForBlacklist);
					}
				}
			} catch (error) {
				console.log(error);
				sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
			}
		});

		const timeFormat = /^\d{1,2}:\d{2}$/;

		bot.onText(/^(.+?) –≤ (.+)/, async (message, match) => {
			const chatId = message.chat.id;
			const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
			if (dataAboutUser && dataAboutUser.userAction == "remindersAdd") {
				let formatIsNice = true,
					hours,
					minutes;

				try {
					[hours, minutes] = match[2].split(":").map(Number);
					formatIsNice = true;
				} catch (error) {
					console.log(error);
					sendDataAboutError(
						chatId,
						dataAboutUser.login,
						`${String(error)}`
					);
					formatIsNice = false;
				}

				try {
					if (
						!timeFormat.test(match[2]) ||
						hours > 23 ||
						minutes > 59 ||
						!formatIsNice
					) {
						await bot.editMessageText(
							`<b>‚ùó –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ üö´\n\n<i>–ü—Ä–∏–º–µ—Ä:</i></b>\n<code>–í—ã–∫–∏–Ω—É—Ç—å –º—É—Å–æ—Ä –≤ </code><b>H:MM\n\n–ü–µ—Ä–µ–ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∏–∂–µ üòâ‚úçÔ∏è</b>`,
							{
								parse_mode: "html",
								chat_id: chatId,
								message_id: usersData.find(
									(obj) => obj.chatId == chatId
								).messageId,
								reply_markup: {
									inline_keyboard: [
										[
											{
												text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
												callback_data: "reminders",
											},
										],
									],
								},
							}
						);
					} else {
						let rndId = 1; // –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ id
						do {
							rndId = Math.floor(Math.random() * 1000);
						} while (
							remindersData.some(
								(remindersData) => remindersData.reminderId == rndId
							) &&
							remindersData.length != 0
						);
						remindersData.push({
							chatId: chatId,
							text: match[1],
							time: match[2],
							isDone: false,
							reminderId: rndId, // –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ id
						});

						await bot.editMessageText(
							`<b>–ü–æ—Å—Ç–∞–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b> üòâüîî\n\n<i>"${
								match[1]
							}" - <b>${
								hours < new Date().getHours() ||
								(hours <= new Date().getHours() &&
									minutes <= new Date().getMinutes())
									? "–∑–∞–≤—Ç—Ä–∞ –≤ "
									: ""
							}${match[2]}\n\n‚ùó–ü–†–û–í–ï–†–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø‚ùó</b></i>`,
							{
								parse_mode: "html",
								chat_id: message.chat.id,
								message_id: usersData.find(
									(obj) => obj.chatId == chatId
								).messageId,
								reply_markup: {
									inline_keyboard: [
										[
											{
												text: `–¢–µ–∫—É—â–∏–µ ${
													remindersData.filter(
														(obj) => obj.chatId == chatId
													).length
												} üìÉ`,
												callback_data: "reminderslist",
											},
											{
												text: "–°–æ–∑–¥–∞—Ç—å –µ—â–µ ‚ûï",
												callback_data: "remindersadd",
											},
										],
										[
											{
												text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
												callback_data: "reminders",
											},
										],
									],
								},
							}
						);
					}
				} catch (error) {
					console.log(error);
					sendDataAboutError(
						chatId,
						dataAboutUser.login,
						`${String(error)}`
					);
				}
			}
		});

		bot.on("text", async (message) => {
			const chatId = message.chat.id;
			const text = message.text;

			if (!usersData.find((obj) => obj.chatId == chatId)) {
				usersData.push({
					chatId: chatId,
					inBlackList: false,
					username: message.from.username,
					login: message.from.first_name,
					telegramFirstName: message.from.first_name,
					userStatus:
						chatId == qu1z3xId ? "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üëë" : "–£—á–µ–Ω–∏–∫ üßë‚Äçüè´",
					userAction: 0,
					countOfActions: 1,
					lastActivity: Date.now(),
					dateOfRegistration: `${new Date()
						.getDate()
						.toString()
						.padStart(2, "0")}.${(new Date().getMonth() + 1)
						.toString()
						.padStart(2, "0")}.${(new Date().getFullYear() % 100)
						.toString()
						.padStart(2, "0")}`,
					schoolName: "",
					className: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
					messageId: "",
					messageIdSayHi0: "",
					messageIdSayHi1: "",
					messageIdSayHi2: "",
					weekday: "",
					// calls
					callOnLesson: false,
					callOnLessonIn5minutes: false,
					callOnLessonIn10minutes: false,
					callOnBreak: false,
					callOnBreakIn5minutes: false,
					callOnBreakIn10minutes: false,
					// game1
					game1NiceResults: 0,
					game1BadResults: 0,
					// game2
					game2NiceResults: 0,
					game2BadResults: 0,
					game2DrawResults: 0,
					// game3
					game3NiceResults: 0,
					game3BadResults: 0,
					game3DrawResults: 0,
					game3Difficulty: 3,
					game3PlayerSticker: "",
					playerGame3Board: [
						[" ", " ", " "],
						[" ", " ", " "],
						[" ", " ", " "],
					],
					// mini details
					miniDetail666: 0,
					miniDetail0: 0,
					miniDetail1: 0,
					miniDetail2: 0,
					miniDetail3: 0,
					miniDetail4: 0,
					miniDetail5: 0,
					miniDetail6: 0,
					miniDetail7: 0,
					miniDetail8: 0,
					miniDetail9: 0,
					// reminders for return
					remindersForReturnIsActive: true,
					reminderForReturn1: false,
					reminderForReturn2: false,
					reminderForReturn3: false,
					reminderForReturn4: false,
				});
			}

			const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

			if (dataAboutUser) {
				const dataAboutDining = diningRoomData.find(
					(obj) =>
						obj.botName == BotName &&
						obj.weekdayMenu == dataAboutUser.weekday
				);

				try {
					if (
						!dataAboutUser.inBlackList ||
						text == "/start" ||
						text == "/start afterabsencedata"
					) {
						if (
							dataAboutUser &&
							dataAboutUser.userAction == "allNewsTextEdit"
						) {
							dataAboutUser.userAction = "menuHome";
							newsText[0] = text;
							allNewsTextEdit_2(chatId, text);
						}

						//! reminders –∫—Ä–µ—Å—Ç–∏–∫–∏

						if (text.includes("/start deleterem")) {
							let remNum = text.match(/^\/start deleterem(\d+)$/);
							remNum = parseInt(remNum[1]) - 1;
							const userReminders = remindersData.filter(
								(obj) => obj.chatId == chatId
							);
							if (userReminders.length != 0) {
								remindersData.splice(
									remindersData.indexOf(
										remindersData.find(
											(obj) =>
												obj.reminderId ==
												userReminders[remNum].reminderId
										)
									),
									1
								);
							}
							RemindersList(chatId);
						}
						if (text.includes("/start crossoutrem")) {
							let remNum = text.match(/^\/start crossoutrem(\d+)$/);
							remNum = parseInt(remNum[1]) - 1;
							const userReminders = remindersData.filter(
								(obj) => obj.chatId == chatId
							);

							if (
								userReminders.length != 0 &&
								remindersData[
									remindersData.indexOf(
										remindersData.find(
											(obj) =>
												obj.reminderId ==
												userReminders[remNum].reminderId
										)
									)
								]
							) {
								remindersData[
									remindersData.indexOf(
										remindersData.find(
											(obj) =>
												obj.reminderId ==
												userReminders[remNum].reminderId
										)
									)
								].isDone = true;
							}
							RemindersList(chatId);
						}

						//! –ú–∏–Ω–∏ –ø–∞—Å—Ö–∞–ª–∫–∏

						if (text.includes("/start minidetail")) {
							let miniDetailNum = text.match(
								/^\/start minidetail(\d+)$/
							);
							miniDetailNum = parseInt(miniDetailNum[1]);
							miniDetails(chatId, miniDetailNum);
						}

						if (text.includes("/start raspisanieon")) {
							let dayForRaspisanie = text.match(
								/^\/start raspisanieon(\d+)$/
							);
							dayForRaspisanie = parseInt(dayForRaspisanie[1]);
							RaspisanieText(chatId, dayForRaspisanie);
						}

						if (
							text.includes("/start addtoblacklistuser") &&
							chatId == qu1z3xId
						) {
							let idToAdd = text.match(
								/^\/start addtoblacklistuser(\d+)$/
							);
							chatIdForBlacklist = parseInt(idToAdd[1]);

							addInBlacklist_2(chatId, chatIdForBlacklist);
						}

						if (
							text.includes("/start deletefromblacklistuser") &&
							chatId == qu1z3xId
						) {
							let idToKill = text.match(
								/^\/start deletefromblacklistuser(\d+)$/
							);
							idToKill = parseInt(idToKill[1]);

							usersData[
								usersData.findIndex((obj) => obj.chatId == idToKill)
							].inBlackList = false;

							if (dataAboutUser.userAction == "usersBlacklist") {
								usersBlacklist(chatId);
							} else if (
								dataAboutUser.userAction == "registryUsersData"
							) {
								registryUsersData(chatId, 1);
							}
						}

						if (text.includes("/start callson")) {
							let dayForCalls = text.match(/^\/start callson(\d+)$/);
							dayForCalls = parseInt(dayForCalls[1]);
							Calls(chatId, dayForCalls);
						}

						//? –ö–û–ú–ê–ù–î–´

						switch (text) {
							case "/start afterabsencedata":
								deleteAllMessages(chatId);
								start(chatId, message.from.first_name, false, true);
								break;
							case "/start":
								start(chatId, message.from.first_name);
								break;
							case "S":
							case "s":
								if (
									dataAboutUser &&
									(chatId == qu1z3xId || chatId == jackId)
								) {
									dataAboutUser.userAction = "menuHome";
									deleteAllMessages(chatId);
									start(chatId, message.from.first_name, true);
								}
								break;
							case "/restart":
								await bot
									.sendMessage(chatId, `„Ö§`, {})
									.then((message) => {
										dataAboutUser.messageId = message.message_id;
									});

								menuHome(chatId);
								break;
							case "/start rules":
								rulesBot(chatId);
								break;
							case "/start rules2":
								rulesBot(chatId, false);
								break;
							case "/start settings":
								Settings(chatId);
								break;
							case "/start editfistname":
								editFistName(chatId);
								break;
							case "/start editclass":
								ChoosingClass(chatId, 0);
								break;
							case "/start remindersList":
								RemindersList(chatId);
								break;
							case "/start remindersAdd":
								remindersAdd(chatId);
								break;
							case "/start notificationsmenucalls":
								NotificationsMenuCalls(chatId);
								break;

							case "/start remindersforreturntoggle":
								dataAboutUser.remindersForReturnIsActive =
									!dataAboutUser.remindersForReturnIsActive;
								Settings(chatId);
								break;
							case "/start ratelikeonfood":
								dataAboutDining.countOfLikesOnFood += 1;
								foodMenu(chatId);
								break;
							case "/start rateneutralonfood":
								dataAboutDining.countOfNeutralOnFood += 1;
								foodMenu(chatId);
								break;
							case "/start ratedislikeonfood":
								dataAboutDining.countOfDislikesOnFood += 1;
								foodMenu(chatId);
								break;
							case "/start showhi2":
								bot.editMessageText(
									`*[–°–∫—Ä—ã—Ç—å](https://t.me/${BotName}/?start=hidehi2)\n\n–Ø —á–∞—Ç\\-–±–æ—Ç ü§ñ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é _—Ü–∏—Ñ—Ä–æ–≤–æ–µ_ –æ–±—É—á–µ–Ω–∏–µ üè´\\. –Ø –±—É–¥—É —Ç–≤–æ–∏–º –≤–µ—Ä–Ω—ã–º —É—á–µ–±–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º\\! üòâ\n  ‚Ä¢ –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? üìö\n  ‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å –∫–æ–≥–¥–∞ –∏–¥—Ç–∏ –Ω–∞ —É—Ä–æ–∫? ‚è∞\n  ‚Ä¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ç–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö? üìù\n  ‚Ä¢ –ù–∞–≤–µ—è—Ç—å –∞–ø–ø–µ—Ç–∏—Ç —Å—Ç–æ–ª–æ–≤—ã–º –º–µ–Ω—é? üòã\n  ‚Ä¢ –°—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–µ–π–∫—É –≤ –¶—É–µ\\-–§–∞? ‚úåÔ∏è\n  ‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à–∫–æ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏? üìñ\n–¢–æ–≥–¥–∞ —è –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º\\! –ü–æ–µ—Ö–∞–ª–∏\\! [üöÄ](https://t.me/${BotName}/?start=minidetail2)*`,
									{
										parse_mode: "MarkdownV2",
										chat_id: dataAboutUser.chatId,
										message_id: dataAboutUser.messageIdSayHi2,
										disable_web_page_preview: true,
									}
								);
								break;
							case "/start hidehi2":
								bot.editMessageText(
									`<b><a href = "https://t.me/${BotName}/?start=showhi2">–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç?</a></b>`,
									{
										parse_mode: "html",
										chat_id: dataAboutUser.chatId,
										message_id: dataAboutUser.messageIdSayHi2,
										disable_web_page_preview: true,
									}
								);
								break;
							case "/start detailsRules":
								detailsRules(chatId);
								break;
							default:
								break;
						}
						dataAboutUser.countOfActions += 1;
						dataAboutUser.lastActivity = Date.now();
						dataAboutUser.reminderForReturn1 = false;
						dataAboutUser.reminderForReturn2 = false;
						dataAboutUser.reminderForReturn3 = false;
						dataAboutUser.reminderForReturn4 = false;
					}
					bot.deleteMessage(chatId, message.message_id);
				} catch (error) {
					console.log(error);
					sendDataAboutError(
						chatId,
						dataAboutUser.login,
						`${String(error)}`
					);
				}
			}
		});

		//? –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ê–í–ò–ê–¢–£–†–´ –ü–û–î –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò

		bot.on("callback_query", (query) => {
			const chatId = query.message.chat.id;
			const data = query.data;

			const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

			try {
				if (
					(dataAboutUser && !dataAboutUser.inBlackList) ||
					data == "rules2"
				) {
					day = new Date().getDate();
					dayW = new Date().getDay();
					month = new Date().getMonth();
					// dataAboutUser.messageId = query.message.message_id;

					// game1
					if (
						data == "0" ||
						data == "1" ||
						data == "2" ||
						data == "3" ||
						data == "4" ||
						data == "5" ||
						data == "6" ||
						data == "7" ||
						data == "8" ||
						data == "9"
					) {
						bot.editMessageText(
							`*_‚ùì –£–≥–∞–¥–∞–π\\-–∫–∞ ‚ùì_\n\n${
								data == rndNum
									? `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ ${rndNum}\\!ü•≥`
									: `${
											data == "0" ||
											data == "1" ||
											data == "2" ||
											data == "3" ||
											data == "4" ||
											data == "5" ||
											data == "6" ||
											data == "7" ||
											data == "8" ||
											data == "9"
												? `‚ùå –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ üòî\n–û—Ç–≤–µ—Ç: ${rndNum}\\!`
												: ``
									  }`
							}\n\n[–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞](https://t.me/${BotName}/?start=settings)\n\n–ï—â—ë –ø–∞—Ä—Ç–µ–π–∫—É\\? ü§î*`,
							{
								parse_mode: "MarkdownV2",
								chat_id: chatId,
								message_id: usersData.find(
									(obj) => obj.chatId == chatId
								).messageId,
								disable_web_page_preview: true,
								reply_markup: {
									inline_keyboard: [
										[
											{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
											{ text: "–î–∞–≤–∞–πüëå", callback_data: "game1" },
										],
									],
								},
							}
						);
					}
					if (data == rndNum) dataAboutUser.game1NiceResults += 1;
					else if (
						data == "0" ||
						data == "1" ||
						data == "2" ||
						data == "3" ||
						data == "4" ||
						data == "5" ||
						data == "6" ||
						data == "7" ||
						data == "8" ||
						data == "9"
					)
						dataAboutUser.game1BadResults += 1;

					// game3

					if (
						dataAboutUser &&
						dataAboutUser.userAction == "game3_2" &&
						data != "game3" &&
						data != "games" &&
						data != "game3_2"
					) {
						const [row, col] = data.split("|").map(Number);
						if (dataAboutUser.playerGame3Board[row][col] == " ") {
							dataAboutUser.playerGame3Board[row][col] =
								dataAboutUser.game3PlayerSticker;

							let res = game3Result(chatId);
							if (!res) {
								bot.editMessageText(
									`<b><i>‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏ ‚≠ï</i>\n\n–¢–µ–ø–µ—Ä—å —Ö–æ–∂—É —è ${
										dataAboutUser.game3PlayerSticker == "‚ùå"
											? "‚≠ï"
											: "‚ùå"
									}</b>`,
									{
										chat_id: chatId,
										message_id: dataAboutUser.messageId,
										parse_mode: "HTML",
										reply_markup: game3InlineKeyboard(chatId, false),
									}
								);

								if (
									dataAboutUser &&
									dataAboutUser.userAction == "game3_2"
								) {
									let botRow,
										botCol,
										count = 0,
										difficultyMiddleCount = 2;
									if (dataAboutUser.game3Difficulty == 2) {
										difficultyMiddleCount = Math.floor(
											Math.random() * 2
										);
									}
									if (
										dataAboutUser.game3Difficulty == 0 ||
										difficultyMiddleCount == 0
									) {
										do {
											botRow = Math.floor(Math.random() * 3);
											botCol = Math.floor(Math.random() * 3);
											count++;
											if (count == 40) {
												res = "–ù–∏—á—å—è!";
												break;
											}
										} while (
											dataAboutUser.playerGame3Board[botRow][
												botCol
											] != " "
										);
									}
									if (
										dataAboutUser.game3Difficulty == 1 ||
										difficultyMiddleCount == 1
									) {
										let botMoveMade = false;
										// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/–ø–æ–±–µ–¥—ã
										for (let i = 0; i < 3; i++) {
											if (
												dataAboutUser.playerGame3Board[i][0] ==
													dataAboutUser.playerGame3Board[i][1] &&
												dataAboutUser.playerGame3Board[i][0] !=
													" " &&
												dataAboutUser.playerGame3Board[i][2] == " "
											) {
												botRow = i;
												botCol = 2;
												botMoveMade = true;
												break;
											} else if (
												dataAboutUser.playerGame3Board[i][1] ==
													dataAboutUser.playerGame3Board[i][2] &&
												dataAboutUser.playerGame3Board[i][1] !=
													" " &&
												dataAboutUser.playerGame3Board[i][0] == " "
											) {
												botRow = i;
												botCol = 0;
												botMoveMade = true;
												break;
											} else if (
												dataAboutUser.playerGame3Board[i][0] ==
													dataAboutUser.playerGame3Board[i][2] &&
												dataAboutUser.playerGame3Board[i][0] !=
													" " &&
												dataAboutUser.playerGame3Board[i][1] == " "
											) {
												botRow = i;
												botCol = 1;
												botMoveMade = true;
												break;
											}
										}
										// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/–ø–æ–±–µ–¥—ã
										for (let i = 0; i < 3; i++) {
											// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏—è—Ö
											if (
												dataAboutUser.playerGame3Board[0][i] ==
													dataAboutUser.playerGame3Board[1][i] &&
												dataAboutUser.playerGame3Board[0][i] !=
													" " &&
												dataAboutUser.playerGame3Board[2][i] == " "
											) {
												botRow = 2;
												botCol = i;
												botMoveMade = true;
												break;
											} else if (
												dataAboutUser.playerGame3Board[1][i] ==
													dataAboutUser.playerGame3Board[2][i] &&
												dataAboutUser.playerGame3Board[1][i] !=
													" " &&
												dataAboutUser.playerGame3Board[0][i] == " "
											) {
												botRow = 0;
												botCol = i;
												botMoveMade = true;
												break;
											} else if (
												dataAboutUser.playerGame3Board[0][i] ==
													dataAboutUser.playerGame3Board[2][i] &&
												dataAboutUser.playerGame3Board[0][i] !=
													" " &&
												dataAboutUser.playerGame3Board[1][i] == " "
											) {
												botRow = 1;
												botCol = i;
												botMoveMade = true;
												break;
											}
										}
										// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/–ø–æ–±–µ–¥—ã
										// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –≤ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
										if (
											dataAboutUser.playerGame3Board[0][0] ==
												dataAboutUser.playerGame3Board[1][1] &&
											dataAboutUser.playerGame3Board[0][0] != " " &&
											dataAboutUser.playerGame3Board[2][2] == " "
										) {
											botRow = 2;
											botCol = 2;
											botMoveMade = true;
										} else if (
											dataAboutUser.playerGame3Board[1][1] ==
												dataAboutUser.playerGame3Board[2][2] &&
											dataAboutUser.playerGame3Board[1][1] != " " &&
											dataAboutUser.playerGame3Board[0][0] == " "
										) {
											botRow = 0;
											botCol = 0;
											botMoveMade = true;
										} else if (
											dataAboutUser.playerGame3Board[0][0] ==
												dataAboutUser.playerGame3Board[2][2] &&
											dataAboutUser.playerGame3Board[0][0] != " " &&
											dataAboutUser.playerGame3Board[1][1] == " "
										) {
											botRow = 1;
											botCol = 1;
											botMoveMade = true;
										}

										// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –≤ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ (—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ)
										if (
											dataAboutUser.playerGame3Board[0][2] ==
												dataAboutUser.playerGame3Board[1][1] &&
											dataAboutUser.playerGame3Board[0][2] != " " &&
											dataAboutUser.playerGame3Board[2][0] == " "
										) {
											botRow = 2;
											botCol = 0;
											botMoveMade = true;
										} else if (
											dataAboutUser.playerGame3Board[1][1] ==
												dataAboutUser.playerGame3Board[2][0] &&
											dataAboutUser.playerGame3Board[1][1] != " " &&
											dataAboutUser.playerGame3Board[0][2] == " "
										) {
											botRow = 0;
											botCol = 2;
											botMoveMade = true;
										} else if (
											dataAboutUser.playerGame3Board[0][2] ==
												dataAboutUser.playerGame3Board[2][0] &&
											dataAboutUser.playerGame3Board[0][2] != " " &&
											dataAboutUser.playerGame3Board[1][1] == " "
										) {
											botRow = 1;
											botCol = 1;
											botMoveMade = true;
										}
										if (!botMoveMade) {
											do {
												botRow = Math.floor(Math.random() * 3);
												botCol = Math.floor(Math.random() * 3);
												count++;
												if (count == 40) {
													res = "–ù–∏—á—å—è!";
													break;
												}
											} while (
												dataAboutUser.playerGame3Board[botRow][
													botCol
												] != " "
											);
										}
									}
									if (!res) {
										dataAboutUser.playerGame3Board[botRow][
											botCol
										] = `${
											dataAboutUser.game3PlayerSticker == "‚ùå"
												? "‚≠ï"
												: "‚ùå"
										}`;
										res = game3Result(chatId);

										if (
											res != "–ù–∏—á—å—è!" &&
											res != "‚ùå" &&
											res != "‚≠ï"
										) {
											setTimeout(() => {
												bot.editMessageText(
													`<b><i>‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏ ‚≠ï</i>\n\n–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å ${dataAboutUser.game3PlayerSticker}</b>`,
													{
														chat_id: chatId,
														message_id: dataAboutUser.messageId,
														parse_mode: "HTML",
														reply_markup:
															game3InlineKeyboard(chatId),
													}
												);
											}, 1000);
										}
									}
								}
							}
							setTimeout(() => {
								if (
									(res == "–ù–∏—á—å—è!" || res == "‚ùå" || res == "‚≠ï") &&
									dataAboutUser.userAction != 0
								) {
									dataAboutUser.userAction = "menuHome";
									let boardString = "";
									for (
										let i = 0;
										i < dataAboutUser.playerGame3Board.length;
										i++
									) {
										for (
											let j = 0;
											j < dataAboutUser.playerGame3Board[i].length;
											j++
										) {
											const cell =
												dataAboutUser.playerGame3Board[i][j];
											boardString +=
												cell !== " " ? ` ${cell} ` : "‚†Ä‚†Ä‚†Ä";
											if (
												j <
												dataAboutUser.playerGame3Board[i].length - 1
											) {
												boardString += "|";
											}
										}
										if (
											i <
											dataAboutUser.playerGame3Board.length - 1
										) {
											boardString += "\n‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî\n";
										}
									}
									bot.editMessageText(
										`<b><i>‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏ ‚≠ï</i>\n\n${
											res != dataAboutUser.game3PlayerSticker
												? `${
														res == "–ù–∏—á—å—è!"
															? `ü§∑‚Äç‚ôÇÔ∏è –ù–∏—á—å—è! ü§∑`
															: `ü•à –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! üòî`
												  }`
												: `ü•á –í—ã–∏–≥—Ä—ã—à! ü•≥`
										}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n${boardString}\n\n–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${
											dataAboutUser.game3Difficulty == 0
												? "–õ–µ–≥–∫–æ"
												: `${
														dataAboutUser.game3Difficulty == 2
															? "–°—Ä–µ–¥–Ω—è—è"
															: `${
																	dataAboutUser.game3Difficulty ==
																	1
																		? "–¢—è–∂–µ–ª–æ"
																		: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
															  }`
												  }`
										}\n<a href="https://t.me/${BotName}/?start=settings">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>\n\n–ï—â–µ –ø–∞—Ä—Ç–µ–π–∫—É? ü§î</b>`,
										{
											parse_mode: "html",
											chat_id: chatId,
											message_id: dataAboutUser.messageId,
											disable_web_page_preview: true,
											reply_markup: {
												inline_keyboard: [
													[
														{
															text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
															callback_data: "games",
														},
														{
															text: "–î–∞–≤–∞–πüëå",
															callback_data: `game3_2`,
														},
													],
												],
											},
										}
									);
									// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

									if (res && res != dataAboutUser.game3PlayerSticker) {
										if (res == "–ù–∏—á—å—è!")
											dataAboutUser.game3DrawResults += 1;
										else dataAboutUser.game3BadResults += 1;
									} else dataAboutUser.game3NiceResults += 1;
								}
							}, 500);
						}
					}

					if (data.includes("deletereminder")) {
						let remId = data.match(/^deletereminder(\d+)$/);
						remId = parseInt(remId[1]);

						try {
							bot.deleteMessage(chatId, query.message.message_id);

							let index = remindersData.findIndex(
								(obj) => obj.reminderId == remId
							);
							remindersData.splice(index, 1); // —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –æ–±—ä—è–≤–∏–ª–æ—Å—å
						} catch (error) {
							console.log(error);
							sendDataAboutError(
								chatId,
								dataAboutUser.login,
								`${String(error)}`
							);
						}
					}

					if (data.includes("updatetimeforreminder")) {
						let remId = data.match(/^updatetimeforreminder(\d+)$/);
						remId = parseInt(remId[1]);
						let index = remindersData.findIndex(
							(obj) => obj.reminderId == remId
						);

						bot.editMessageText(
							`<b><i>üîî –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üîÑÔ∏è</i>\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n"${remindersData[index].text}"\n\n<b>–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏? üòâ</b>`,
							{
								parse_mode: "html",
								chat_id: chatId,
								message_id: query.message.message_id,
								reply_markup: {
									inline_keyboard: [
										[
											{
												text: "–ù–∞ –∑–∞–≤—Ç—Ä–∞",
												callback_data: `reschedulereminder${remId}on${0}`,
											},
										],
										[
											{
												text: "1–º",
												callback_data: `reschedulereminder${remId}on${1}`,
											},
											{
												text: "3–º",
												callback_data: `reschedulereminder${remId}on${3}`,
											},
											{
												text: "5–º",
												callback_data: `reschedulereminder${remId}on${5}`,
											},
											{
												text: "10–º",
												callback_data: `reschedulereminder${remId}on${10}`,
											},
										],
										[
											{
												text: "15–º",
												callback_data: `reschedulereminder${remId}on${15}`,
											},
											{
												text: "30–º",
												callback_data: `reschedulereminder${remId}on${30}`,
											},
											{
												text: "1—á",
												callback_data: `reschedulereminder${remId}on${12}`,
											},
											{
												text: "2—á",
												callback_data: `reschedulereminder${remId}on${22}`,
											},
										],
										[
											{
												text: "–£–¥–∞–ª–∏—Ç—å ‚ùå",
												callback_data: `deletereminder${remId}`,
											},
										],
									],
								},
							}
						);
					}

					if (data.includes("reschedulereminder")) {
						let remId = data.match(/^reschedulereminder(\d+)on(\d+)$/);
						let countTime = parseInt(remId[2]);
						remId = parseInt(remId[1]);

						let index = remindersData.findIndex(
							(obj) => obj.reminderId == remId
						);

						let [hours, minutes] = remindersData[index].time
							.split(":")
							.map(Number);

						switch (countTime) {
							case 0:
								break;
							case 1:
								minutes += 1;
								if (minutes >= 60) {
									hours += 1;
									minutes -= 60;
								}
								if (hours >= 24) hours -= 24;
								break;
							case 3:
								minutes += 3;
								if (minutes >= 60) {
									hours += 1;
									minutes -= 60;
								}
								if (hours >= 24) hours -= 24;
								break;
							case 5:
								minutes += 5;
								if (minutes >= 60) {
									hours += 1;
									minutes -= 60;
								}
								if (hours >= 24) hours -= 24;
								break;
							case 10:
								minutes += 10;
								if (minutes >= 60) {
									hours += 1;
									minutes -= 60;
								}
								if (hours >= 24) hours -= 24;
								break;
							case 15:
								minutes += 15;
								if (minutes >= 60) {
									hours += 1;
									minutes -= 60;
								}
								if (hours >= 24) hours -= 24;
								break;
							case 30:
								minutes += 30;
								if (minutes >= 60) {
									hours += 1;
									minutes -= 60;
								}
								if (hours >= 24) hours -= 24;
								break;
							case 12:
								hours += 1;
								if (hours >= 24) hours -= 24;

								break;
							case 22:
								hours += 2;
								if (hours >= 24) hours -= 24;
								break;
							default:
								break;
						}

						let newTime = `${String(hours).padStart(2, "0")}:${String(
							minutes
						).padStart(2, "0")}`;
						remindersData[index].time = newTime;

						bot.editMessageText(
							`<i><b>üîÑÔ∏è –ü–µ—Ä–µ–Ω—ë—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üîî\n\n–ù–æ–≤–æ–µ:</b>\n"${
								remindersData[index].text
							}" - <b>${
								hours == new Date().getHours() &&
								minutes == new Date().getMinutes()
									? "–∑–∞–≤—Ç—Ä–∞ –≤ "
									: ""
							}${remindersData[index].time}</b></i>`,
							{
								parse_mode: "html",
								chat_id: chatId,
								message_id: query.message.message_id,
								reply_markup: {
									inline_keyboard: [
										[
											{
												text: "–°–ø–∞—Å–∏–±–æüëç",
												callback_data: `deleteexcess`,
											},
										],
									],
								},
							}
						);
					}

					//? –ö–õ–ê–°–°–´/–†–ê–°–ü–ò–°–ê–ù–ò–ï
					if (
						data == "10a" ||
						data == "10b" ||
						data == "10g" ||
						data == "11d" ||
						data == "11g" ||
						data == "11a" ||
						data == "11v"
					) {
						switch (data) {
							case "10a":
								dataAboutUser.className = "10–ê";
								dataAboutUser.schoolName = "27c1";
								break;
							case "10b":
								dataAboutUser.className = "10–ë";
								dataAboutUser.schoolName = "27c1";
								break;
							case "10g":
								dataAboutUser.className = "10–ì";
								dataAboutUser.schoolName = "27c2";
								break;
							case "11d":
								dataAboutUser.className = "11–î";
								dataAboutUser.schoolName = "27c1";
								break;
							case "11g":
								dataAboutUser.className = "11–ì";
								dataAboutUser.schoolName = "27c1";
								break;
							case "11a":
								dataAboutUser.className = "11–ê";
								dataAboutUser.schoolName = "27c1";
								break;
							case "11v":
								dataAboutUser.className = "11–í";
								dataAboutUser.schoolName = "27c1";
								break;
						}
						if (dataAboutUser.userAction == "Calls") Calls(chatId);
						else if (dataAboutUser.userAction == "foodMenu")
							foodMenu(chatId);
						else if (dataAboutUser.userAction == "RaspisanieText")
							RaspisanieText(chatId);
						else menuHome(chatId);
					}

					//? –î–ï–ù–¨ –ù–ï–î–ï–õ–ò

					switch (data) {
						case "mon":
							dataAboutUser.weekday = 1;
							RaspisanieText(chatId);
							break;
						case "tue":
							dataAboutUser.weekday = 2;
							RaspisanieText(chatId);
							break;
						case "wen":
							dataAboutUser.weekday = 3;
							RaspisanieText(chatId);
							break;
						case "thu":
							dataAboutUser.weekday = 4;
							RaspisanieText(chatId);
							break;
						case "fri":
							dataAboutUser.weekday = 5;
							RaspisanieText(chatId);
							break;
						case "today":
							RaspisanieText(chatId, dayW);
							break;
						case "nextweekday":
							if (dataAboutUser.weekday == 6) dataAboutUser.weekday = 0;
							else if (dataAboutUser.weekday < 6)
								dataAboutUser.weekday += 1;
							RaspisanieText(chatId);
							break;
						case "previousweekday":
							if (dataAboutUser.weekday == 0) dataAboutUser.weekday = 6;
							else if (dataAboutUser.weekday > 0)
								dataAboutUser.weekday -= 1;
							RaspisanieText(chatId);
							break;
						case "allsubjects":
							allSubjectsCount(chatId);
							break;

						//? –î–ï–ô–°–¢–í–ò–Ø –ö–ù–û–ü–û–ö

						// –ù–ê–ß–ê–õ–¨–ù–´–ï
						case "start":
							deleteAllMessages(chatId);
							start(chatId, dataAboutUser.login);
							break;
						case "exit":
							if (
								dataAboutUser &&
								dataAboutUser.userAction == "registryUsersData"
							) {
								registryUsersData(chatId, 1);
							} else {
								dataAboutUser.weekday = dayW;
								dataAboutUser.userAction = "menuHome";
								try {
									menuHome(chatId);
								} catch (error) {
									menuHome(chatId, false);
								}
							}

							break;
						case "rules1":
							rulesBot(chatId);
							break;
						case "rules2":
							rulesBot(chatId, false);
							break;
						case "miniDetails":
							miniDetails(chatId, 666);
							break;
						case "detailsrules":
							detailsRules(chatId);
							break;
						case "chooseclass1":
							ChoosingClass(chatId, 1);
							break;
						case "chooseclass2":
							ChoosingClass(chatId, 2);
							break;

						// RASPISANIE

						case "raspisanie":
							if (TOKEN == config.TOKENs[0]) {
							}
							Raspisanie(chatId);
							break;
						case "netclassa":
							netClassaText(chatId);
							break;
						case "netclassa1":
							netClassaText(chatId, false);
							break;

						// CALLS

						case "calls":
							Calls(chatId);
							break;
						case "todaycalls":
							dataAboutUser.weekday = dayW;
							Calls(chatId);
							break;
						case "nextweekdaycalls":
							if (dataAboutUser.weekday == 6) dataAboutUser.weekday = 0;
							else if (dataAboutUser.weekday < 6)
								dataAboutUser.weekday += 1;
							Calls(chatId);
							break;
						case "previousweekdaycalls":
							if (dataAboutUser.weekday == 0) dataAboutUser.weekday = 6;
							else if (dataAboutUser.weekday > 0)
								dataAboutUser.weekday -= 1;
							Calls(chatId);
							break;
						case "callsnotificationsmenu":
							NotificationsMenuCalls(chatId);
							break;
						case "notificationsMenuCallsAndDelete":
							try {
								bot.deleteMessage(chatId, query.message.message_id);
								NotificationsMenuCalls(chatId);
							} catch (error) {
								console.log(error);
								sendDataAboutError(
									chatId,
									dataAboutUser.login,
									`${String(error)}`
								);
							}
							break;
						case "toggle–°allOnLesson":
							NotificationsMenuCalls(
								chatId,
								!dataAboutUser.callOnLesson,
								dataAboutUser.callOnBreak,
								dataAboutUser.callOnLessonIn5minutes,
								dataAboutUser.callOnBreakIn5minutes,
								dataAboutUser.callOnLessonIn10minutes,
								dataAboutUser.callOnBreakIn10minutes
							);
							break;
						case "toggle–°allOnBreak":
							NotificationsMenuCalls(
								chatId,
								dataAboutUser.callOnLesson,
								!dataAboutUser.callOnBreak,
								dataAboutUser.callOnLessonIn5minutes,
								dataAboutUser.callOnBreakIn5minutes,
								dataAboutUser.callOnLessonIn10minutes,
								dataAboutUser.callOnBreakIn10minutes
							);
							break;
						case "toggle–°allOnLessonIn5minutes":
							NotificationsMenuCalls(
								chatId,
								dataAboutUser.callOnLesson,
								dataAboutUser.callOnBreak,
								!dataAboutUser.callOnLessonIn5minutes,
								dataAboutUser.callOnBreakIn5minutes,
								dataAboutUser.callOnLessonIn10minutes,
								dataAboutUser.callOnBreakIn10minutes
							);

							break;
						case "toggle–°allOnBreakIn5minutes":
							NotificationsMenuCalls(
								chatId,
								dataAboutUser.callOnLesson,
								dataAboutUser.callOnBreak,
								dataAboutUser.callOnLessonIn5minutes,
								!dataAboutUser.callOnBreakIn5minutes,
								dataAboutUser.callOnLessonIn10minutes,
								dataAboutUser.callOnBreakIn10minutes
							);

							break;
						case "toggle–°allOnLessonIn10minutes":
							NotificationsMenuCalls(
								chatId,
								dataAboutUser.callOnLesson,
								dataAboutUser.callOnBreak,
								dataAboutUser.callOnLessonIn5minutes,
								dataAboutUser.callOnBreakIn5minutes,
								!dataAboutUser.callOnLessonIn10minutes,
								dataAboutUser.callOnBreakIn10minutes
							);

							break;
						case "toggle–°allOnBreakIn10minutes":
							NotificationsMenuCalls(
								chatId,
								dataAboutUser.callOnLesson,
								dataAboutUser.callOnBreak,
								dataAboutUser.callOnLessonIn5minutes,
								dataAboutUser.callOnBreakIn5minutes,
								dataAboutUser.callOnLessonIn10minutes,
								!dataAboutUser.callOnBreakIn10minutes
							);
							break;
						case "resetallcalls":
							NotificationsMenuCalls(
								chatId,
								false,
								false,
								false,
								false,
								false,
								false
							);
							break;

						// FOODMENU

						case "foodmenu":
							break;
						case "foodmenutoday":
							foodMenu(chatId, dayW);
							break;
						case "foodmenunextday":
							if (dataAboutUser.weekday == 6) dataAboutUser.weekday = 0;
							else if (dataAboutUser.weekday < 6)
								dataAboutUser.weekday += 1;
							foodMenu(chatId);
							break;
						case "foodmenupreviousday":
							if (dataAboutUser.weekday == 0) dataAboutUser.weekday = 6;
							else if (dataAboutUser.weekday > 0)
								dataAboutUser.weekday -= 1;
							foodMenu(chatId);
							break;

						// GAMES

						case "games":
							Games(chatId);
							break;
						// game1
						case "game1":
							game1(chatId);
							break;
						case "game1_1":
							game1(chatId, false);
							break;
						case "hint":
							try {
								bot.editMessageText(
									`*_‚ùì –£–≥–∞–¥–∞–π\\-–∫–∞ ‚ùì_\n\n${
										rndNum <= 5
											? `–ß–∏—Å–ª–æ _–º–µ–Ω—å—à–µ_ –∏–ª–∏ —Ä–∞–≤–Ω–æ 5\\! [üìâ](https://t.me/${BotName}/?start=minidetail4)üòâ`
											: `${
													rndNum >= 5
														? `–ß–∏—Å–ª–æ _–±–æ–ª—å—à–µ_ –∏–ª–∏ —Ä–∞–≤–Ω–æ 5\\! [üìà](https://t.me/${BotName}/?start=minidetail4)üòâ`
														: ""
											  }`
									}*`,
									{
										parse_mode: "MarkdownV2",
										chat_id: chatId,
										message_id: usersData.find(
											(obj) => obj.chatId == chatId
										).messageId,
										disable_web_page_preview: true,
										reply_markup: {
											inline_keyboard: [
												[
													{
														text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
														callback_data: "game1_1",
													},
													{
														text: "–û—Ç–≤–µ—Ç‚ÅâÔ∏è",
														callback_data: "game1res",
													},
												],
											],
										},
									}
								);
							} catch (error) {
								console.log(error);
								sendDataAboutError(
									chatId,
									dataAboutUser.login,
									`${String(error)}`
								);
							}
							break;
						case "game1res":
							try {
								bot.editMessageText(
									`*_‚ùì –£–≥–∞–¥–∞–π\\-–∫–∞ ‚ùì_\n\n–ù—É —Ç–∞–∫ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ\\! üòí\n–û—Ç–≤–µ—Ç: ${rndNum}\\!\n\n–ï—â–µ –ø–∞—Ä—Ç–µ–π–∫—É\\? ü§î*`,
									{
										parse_mode: "MarkdownV2",
										chat_id: chatId,
										message_id: usersData.find(
											(obj) => obj.chatId == chatId
										).messageId,
										reply_markup: {
											inline_keyboard: [
												[
													{
														text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
														callback_data: "games",
													},
													{
														text: "–î–∞–≤–∞–πüëå",
														callback_data: "game1",
													},
												],
											],
										},
									}
								);
							} catch (error) {
								console.log(error);
								sendDataAboutError(
									chatId,
									dataAboutUser.login,
									`${String(error)}`
								);
							}
							break;

						// game2
						case "game2":
							game2(chatId);
							break;
						case "stoneGame2":
							game2_2(chatId, 1);
							break;
						case "scissorsGame2":
							game2_2(chatId, 2);
							break;
						case "paperGame2":
							game2_2(chatId, 3);
							break;
						// game3
						case "game3":
							game3(chatId);
							break;
						case "game3_2":
							game3_2(chatId);
							break;
						case "XGame3":
							dataAboutUser.game3PlayerSticker = "‚ùå";
							game3(chatId);
							break;
						case "OGame3":
							dataAboutUser.game3PlayerSticker = "‚≠ï";
							game3(chatId);
							break;
						case "Dificulty0Game3":
							dataAboutUser.game3Difficulty = 0;
							game3(chatId);
							break;
						case "Dificulty1Game3":
							dataAboutUser.game3Difficulty = 1;
							game3(chatId);
							break;
						case "Dificulty2Game3":
							dataAboutUser.game3Difficulty = 2;
							game3(chatId);
							break;

						// NEWS

						case "news":
							News(chatId, 1, "–ù–æ–≤–æ—Å—Ç–∏ üìñ");
							break;
						case "botnews":
							News(chatId, 2, "–û –±–æ—Ç–µ ü§ñ");
							break;
						case "schoolnews":
							News(chatId, 3, "–û —à–∫–æ–ª–µ üè´");
							break;

						// SETTINGS

						case "settings":
							if (dataAboutUser.userAction == "Calls") Calls(chatId);
							else if (dataAboutUser.userAction == "foodMenu")
								foodMenu(chatId);
							else if (dataAboutUser.userAction == "RaspisanieText")
								RaspisanieText(chatId);
							else {
								dataAboutUser.userAction = "menuHome";
								Settings(chatId);
							}
							break;
						case "settingsother":
							Settings_2(chatId);
							break;
						case "resetfirstname":
							dataAboutUser.login = dataAboutUser.telegramFirstName;
							editFistName(chatId, dataAboutUser.telegramFirstName);
							break;
						case "deleteaccount":
							try {
								bot.editMessageText(
									"*_üõ†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚ùå\n\n‚ùó–í–ù–ò–ú–ê–ù–ò–ï‚ùó_\n\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ _–£–î–ê–õ–ò–¢–¨_ –∞–∫–∫–∞—É–Ω—Ç\\?*",
									{
										parse_mode: "MarkdownV2",
										chat_id: chatId,
										message_id: usersData.find(
											(obj) => obj.chatId == chatId
										).messageId,
										reply_markup: {
											inline_keyboard: [
												[
													{
														text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
														callback_data: "settingsother",
													},
													{
														text: "–£–¥–∞–ª–∏—Ç—å ‚úÖ",
														callback_data: "deleteaccount2",
													},
												],
											],
										},
									}
								);
							} catch (error) {
								console.log(error);
								sendDataAboutError(
									chatId,
									dataAboutUser.login,
									`${String(error)}`
								);
							}
							break;
						case "deleteaccount2":
							try {
								dataAboutUser.className = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
								// calls
								dataAboutUser.callOnLesson = false;
								dataAboutUser.callOnLessonIn5minutes = false;
								dataAboutUser.callOnLessonIn10minutes = false;
								dataAboutUser.callOnBreak = false;
								dataAboutUser.callOnBreakIn5minutes = false;
								dataAboutUser.callOnBreakIn10minutes = false;
								// game1
								dataAboutUser.game1NiceResults = 0;
								dataAboutUser.game1BadResults = 0;
								// game2
								dataAboutUser.game2NiceResults = 0;
								dataAboutUser.game2BadResults = 0;
								dataAboutUser.game2DrawResults = 0;
								// game3
								dataAboutUser.game3NiceResults = 0;
								dataAboutUser.game3BadResults = 0;
								dataAboutUser.game3DrawResults = 0;
								dataAboutUser.game3Difficulty = 3;
								dataAboutUser.game3PlayerSticker = "";
								// mini details
								dataAboutUser.miniDetail666 = 0;
								dataAboutUser.miniDetail0 = 0;
								dataAboutUser.miniDetail1 = 0;
								dataAboutUser.miniDetail2 = 0;
								dataAboutUser.miniDetail3 = 0;
								dataAboutUser.miniDetail4 = 0;
								dataAboutUser.miniDetail5 = 0;
								dataAboutUser.miniDetail6 = 0;
								dataAboutUser.miniDetail7 = 0;
								dataAboutUser.miniDetail8 = 0;
								dataAboutUser.miniDetail9 = 0;
								bot.editMessageText(
									"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å <b>—É—Å–ø–µ—à–Ω–æ</b> —É–¥–∞–ª–µ–Ω! ‚úÖ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É - <b>@digfusionsupport</b>\n\n–ï—Å–ª–∏ —Å–æ—Å–∫—É—á–∏—à—å—Å—è - <b>/restart üòâ</b>",
									{
										parse_mode: "html",
										chat_id: chatId,
										message_id: usersData.find(
											(obj) => obj.chatId == chatId
										).messageId,
									}
								);
							} catch (error) {
								console.log(error);
								sendDataAboutError(
									chatId,
									dataAboutUser.login,
									`${String(error)}`
								);
							}
							break;

						case "chooseclass0":
							ChoosingClass(chatId, 0);
							break;

						// ADMINMENU

						case "adminMenu":
							adminMenu(chatId);
							break;
						case "adminMenuSendMessage":
							adminMenuSendMessage(chatId);
							break;
						case "usersblacklist":
							usersBlacklist(chatId);
							break;
						case "addinblacklist":
							addInBlacklist(chatId);
							break;
						case "addinblacklistend":
							addInBlacklistEnd(chatId);
							break;
						case "adminMenuSendMessage":
							adminMenuSendMessage(chatId);
							break;
						case "adminMenuSendMessage2":
							adminMenuSendMessage_2(chatId);
							break;
						case "updateraspisaniesheets":
							buttonUpdateActive = false;
							updateSheetsData();
							adminMenuEdit(chatId);
							break;
						case "adminMenuEdit":
							adminMenuEdit(chatId);
							break;
						case "allnewsEDIT":
							allNewsTextEdit(chatId);
							break;
						case "allnewsadd":
							bot.editMessageText(
								"<b><i>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–æ–≤–æ—Å—Ç–∏ üìñ</i></b>\n\n–í—ã <b>—É—Å–ø–µ—à–Ω–æ</b> –æ–±–Ω–æ–≤–∏–ª–∏ –ù–æ–≤–æ—Å—Ç–∏! ‚úÖüìñ",
								{
									parse_mode: "html",
									chat_id: chatId,
									message_id: usersData.find(
										(obj) => obj.chatId == chatId
									).messageId,
								}
							);
							newsText[1] = newsText[0];
							setTimeout(() => {
								adminMenu(chatId);
							}, 1500);
							break;
						case "allnewstextRESETmenu":
							AllNewsTextReset(chatId);
							break;
						case "allnewstextRESET":
							allNewsTextEdit(chatId);
							break;
						case "allnewstextRESETend":
							try {
								newsText[1] = "–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç üòî";
								bot.editMessageText(
									`*_‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–æ–≤–æ—Å—Ç–∏ üìñ_\n\n–†–∞–∑–¥–µ–ª _"–ù–æ–≤–æ—Å—Ç–∏üìñ"_ \\- —Å–±—Ä–æ—à–µ–Ω\\!‚úÖ*`,
									{
										parse_mode: "MarkdownV2",
										chat_id: chatId,
										message_id: usersData.find(
											(obj) => obj.chatId == chatId
										).messageId,
									}
								);
								setTimeout(() => {
									adminMenu(chatId);
								}, 1500);
							} catch (error) {
								console.log(error);
								sendDataAboutError(
									chatId,
									dataAboutUser.login,
									`${String(error)}`
								);
							}
							break;
						case "restart1":
							ChoosingClass(chatId, 2);
							break;
						case "agreerules":
							try {
								ChoosingClass(chatId, 1);
							} catch (error) {
								console.log(error);
								sendDataAboutError(
									chatId,
									dataAboutUser.login,
									`${String(error)}`
								);
							}
							break;
						case "usersdatalist":
							registryUsersData(chatId, 1);
							break;
						case "p0":
							numberArr = 0;
							adminMenuSendMessageSettings(chatId);
							break;
						case "p1":
							numberArr = 1;
							adminMenuSendMessageSettings(chatId);
							break;
						case "p2":
							numberArr = 2;
							adminMenuSendMessageSettings(chatId);
							break;
						case "p3":
							numberArr = 3;
							adminMenuSendMessageSettings(chatId);
							break;

						// REMINDERS

						case "reminders":
							if (dataAboutUser) dataAboutUser.userAction = "menuHome";
							Reminders(chatId);
							break;
						case "reminderslist":
							RemindersList(chatId);
							break;
						case "remindersadd":
							remindersAdd(chatId);
							break;
						case "deleteallreminder":
							try {
								bot.editMessageText(
									`*_üîî –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚ùå\n\n‚ùó–í–ù–ò–ú–ê–ù–ò–ï‚ùó_*\n\n–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏–∑ *_${
										remindersData.filter(
											(obj) => obj.chatId == chatId
										).length
									} ${
										remindersData.filter(
											(obj) => obj.chatId == chatId
										).length == 1
											? "–∑–∞–º–µ—Ç–∫–∏"
											: "–∑–∞–º–µ—Ç–æ–∫"
									}_* –±—É–¥–µ—Ç *—É–¥–∞–ª–µ–Ω*\\!\n\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ *_–£–î–ê–õ–ò–¢–¨_* —Å–ø–∏—Å–æ–∫?‚ùó`,
									{
										parse_mode: "MarkdownV2",
										chat_id: chatId,
										message_id: usersData.find(
											(obj) => obj.chatId == chatId
										).messageId,
										reply_markup: {
											inline_keyboard: [
												[
													{
														text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
														callback_data: "reminderslist",
													},
													{
														text: "–£–¥–∞–ª–∏—Ç—å ‚úÖ",
														callback_data: "deleteallreminder2",
													},
												],
											],
										},
									}
								);
							} catch (error) {
								console.log(error);
								sendDataAboutError(
									chatId,
									dataAboutUser.login,
									`${String(error)}`
								);
							}
							break;
						case "deleteallreminder2":
							try {
								remindersData = remindersData.filter(
									(obj) => obj.chatId !== chatId
								);
								if (
									remindersData.filter((obj) => obj.chatId == chatId)
										.length == 0
								) {
									bot.editMessageText(
										"<b><i>üîî –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚ùå</i>\n\n</b>–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è <b>—É—Å–ø–µ—à–Ω–æ</b> —É–¥–∞–ª–µ–Ω—ã! üòâ‚úÖ",
										{
											parse_mode: "html",
											chat_id: chatId,
											message_id: usersData.find(
												(obj) => obj.chatId == chatId
											).messageId,
										}
									);
									setTimeout(() => {
										RemindersList(chatId);
									}, 1500);
								}
							} catch (error) {
								console.log(error);
								sendDataAboutError(
									chatId,
									dataAboutUser.login,
									`${String(error)}`
								);
							}
							break;
						case "deleteexcess":
							try {
								bot.deleteMessage(chatId, query.message.message_id);
							} catch (error) {
								console.log(error);
								sendDataAboutError(
									chatId,
									dataAboutUser.login,
									`${String(error)}`
								);
							}
							break;
						case "remindersforreturnOff":
							try {
								dataAboutUser.remindersForReturnIsActive = false;
								bot.deleteMessage(chatId, query.message.message_id);
							} catch (error) {
								console.log(error);
								sendDataAboutError(
									chatId,
									dataAboutUser.login,
									`${String(error)}`
								);
							}
							break;
						case "moreAboutUs":
							moreAboutUs(chatId);
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
					}
					dataAboutUser.countOfActions += 1;
					if (data != "deleteexcess") {
						dataAboutUser.lastActivity = Date.now();
						dataAboutUser.reminderForReturn1 = false;
						dataAboutUser.reminderForReturn2 = false;
						dataAboutUser.reminderForReturn3 = false;
						dataAboutUser.reminderForReturn4 = false;
					}

					//* –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ

					if (chatId != qu1z3xId && data != "-") {
						sendDataAboutButton(chatId, query.from.first_name, data);
					}
				} else if (dataAboutUser && dataAboutUser.inBlackList) {
					dataAboutUser.userAction = "inBlackList";

					bot.editMessageText(
						`<b>–ü–æ—Ö–æ–∂–µ —É —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π! ‚òπÔ∏è\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üóØÔ∏èüòâ</b>`,
						{
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId)
								.messageId,
							parse_mode: "html",
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º ‚úçÔ∏è",
											url: "https://t.me/digfusionsupport",
										},
									],
									[
										{ text: "–û–±–Ω–æ–≤–∏—Ç—å üîÑÔ∏è", callback_data: "exit" },
										{
											text: "–ü—Ä–∞–≤–∏–ª–∞ üìÉ",
											callback_data: `rules2`,
										},
									],
								],
							},
						}
					);
				} else if (!dataAboutUser) {
					bot.editMessageText(
						`<b>–ú—ã —Ä–∞–∑–≤–µ –∑–Ω–∞–∫–æ–º—ã? ü§®\n</b>–ú–æ–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–±—è –Ω–µ –ø–æ–º–Ω—è—Ç...<b> \n\n<i>–û–±—ã—á–Ω–æ —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –º–∞—Å—à—Ç–∞–±–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! ‚òπÔ∏è</i>\n\n</b>–†–∞–∑ —É–∂ —Ç–∞–∫ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –≤—Å–µ —Å <b>—á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!</b> –ñ–º–∏ - <b><a href="https://t.me/${BotName}/?start=afterabsencedata">/start</a></b> üòâ`,
						{
							chat_id: chatId,
							message_id: query.message.message_id,
							parse_mode: "html",
							disable_web_page_preview: true,
						}
					);
				}
			} catch (error) {
				sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
				console.log(error);
			}
		});
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, dataAboutUser.login, `${String(error)}`);
	}
}

StartAll();
